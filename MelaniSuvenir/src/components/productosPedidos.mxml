<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="com.hillelcoren.components.*"
		 xmlns:controls="com.adobe.flex.extras.controls.*"
		 width="694" height="380" initialize="group1_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import flexunit.utils.ArrayList;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.flexunit.internals.matchers.Each;
			
			import spark.components.DataGrid;
			import spark.events.ListEvent;
			[Bindable]
				private var xmlproduct:XMLList;
			
			[Bindable]
				private var dp:Array=[];
			[Bindable]
				private var totGral:Number;
			//---------------------------------------------------------------------------
			protected function operation1_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR "+event.fault.toString());
				
			}
			//---------------------------------------------------------------------------
			
			protected function operation1_resultHandler(event:ResultEvent):void
			{
				xmlproduct=new XMLList(event.result);
					
				cmbproduct.dataProvider=productlist;
						
			}
			//--------------------------------------------------------------------------
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				//-------------------------------------------------------------------------------------------
				productosWs.searchAllProductos();
				cmbproduct.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtpreciop.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskcantidad.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				adglistpedprod.addEventListener(AdvancedDataGridEvent.ITEM_EDIT_END,itemEditEndHandler);
				cmbproduct.selectedItemId=1;
				totGral=0;
				//-------------------------------------------------------------------------------------------
			}
			//------------------------------------------------------------------------------------------------
			protected function itemEditEndHandler(event:AdvancedDataGridEvent):void
			{
				// get a reference to the datagrid
				var grid:AdvancedDataGrid = event.target as AdvancedDataGrid;
				// get a reference to the name of the property in the
				// underlying object corresponding to the cell that's being edited
				var field:String = event.dataField;
				// get a reference to the row number (the index in the 
				// dataprovider of the row that's being edited)
				var row:Number = Number(event.rowIndex);
				// get a reference to the column number of
				// the cell that's being edited
				var col:int = event.columnIndex;
				
				
				if (grid != null)
				{
					
					// gets the value (pre-edit) from the grid's dataprovider
					var oldValue:Number = Number(grid.dataProvider.getItemAt(row)[field]);
					// you could also use the following line to get the value
					// directly from the cellrenderer that's showing the value
					// in the datagrid -- it's the same value.
					// That way you wouldn't need a reference to the DataGrid.
					//var oldValue = event.itemRenderer.data[field];
					// get the value (post-edit) from the item editor
					var newValue:Number = Number(grid.itemEditorInstance[grid.columns[col].editorDataField]);
					
					// check if the value has changed
					if (newValue != oldValue)
					{
						// do actions that should happen when the data changes
						// Note that in this case, the dataprovider
						// hasn't been updated yet, so you can't do any
						// actions that require the dataprovider to have 
						// the new data
						//Alert.show(newValue+" "+oldValue+" "+col+" "+grid.selectedItem.subtotal);
						if(col==2){
							var priceValue:Number=(grid.selectedItem.price);
							//Alert.show(newValue+" "+priceValue);
							grid.selectedItem.subtotal=newValue*priceValue;
						
							
						
						}else{
							var cannt:Number=(grid.selectedItem.countt);
							//Alert.show(newValue+" "+cannt);
							grid.selectedItem.subtotal=newValue*cannt;
						
						}
						arrayDg.refresh();
							
					}
				}
				
			}

			//------------------------------------------------------------------------------------------------
			private function addadglistpedprod(codigoId:String,txtprecio:String,cantidad:String,descripcion:String):void{
				var subtot:Number;
				var b:Boolean=false;
				
				subtot=Number(Number(Number(Number(txtprecio).toFixed(2))*Number(cantidad)).toFixed(2));
				totGral=Number(Number(totGral.toFixed(2))+Number(subtot.toFixed(2)));
				
				
				if(dp.length==0)
					dp=[{id:codigoId,name:descripcion,countt:cantidad,price:txtprecio,subtotal:subtot}];
				else{
					
						for(var i:int=0;i<dp.length;i++){	
					
								
							if(dp[i].name==descripcion){
								dp[i].countt=int(dp[i].countt)+int(cantidad);
					
								dp[i].subtotal=dp[i].subtotal+subtot;
								b=true;
							
							}
						}
					if(!b)					
						dp.push({id:codigoId,name:descripcion,countt:cantidad,price:txtprecio,subtotal:subtot});
						
					}
			
			
				arrayDg.source=dp;
				arrayDg.refresh();
							
				adglistpedprod.dataProvider=arrayDg;
				lblTotGral.text=String(totGral.toFixed(2));
			
			}
			//--------------------------------------------------------------------------------------
			private function transferirFocus(KeyPress:KeyboardEvent):void{
				
				if(KeyPress.keyCode==Keyboard.ENTER){
					if(cmbproduct.text!=""&&KeyPress.currentTarget.toString().indexOf("cmbproduct")!=-1){
							focusManager.setFocus(txtpreciop);
							txtpreciop.text=cmbproduct.selectedItem.precio;
					
					}
					if(KeyPress.currentTarget.toString().indexOf("mskcantidad")!=-1){
						
						addadglistpedprod(cmbproduct.selectedItem.id,txtpreciop.text,mskcantidad.text,cmbproduct.selectedItem.descripcion);
					
					}
					if(KeyPress.currentTarget.toString().indexOf("txtpreciop")!=-1)
						focusManager.setFocus(mskcantidad);
						
				
				}
			
			
			}
			//---------------------------------------------------------------------------------
			
			
			//-------------------------------------------------------------------------------------
			
			
			protected function adglistpedprod_dataChangeHandler(event:FlexEvent):void
			{
				
				Alert.show("DATOS CAMBIADOS!!!");
				
			}
			//-------------------------------------------------------------------------------------
			
			protected function adglistpedprod_itemDoubleClickHandler(event:mx.events.ListEvent):void
			{
				// TODO Auto-generated method stub
				Alert.show("Está seguro de eliminar el Registro actual?","Confirmar Eliminación", Alert.YES | Alert.NO, this, delRowHandler, null, Alert.NO);
					
				
			}
			//--------------------------------------------------------------------------------------
			protected function delRowHandler(evt:CloseEvent):void{
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				
				totGral=Number(totGral.toFixed(2))-Number(Number(adglistpedprod.selectedItem.subtotal).toFixed(2));
				lblTotGral.text=totGral.toFixed(2);
				
				adglistpedprod.dataProvider.removeItemAt(adglistpedprod.selectedIndex);
			
			
			}
			//--------------------------------------------------------------------------------------
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:WebService id="productosWs" wsdl="http://localhost:8080/ServiceProductos/ProductosWs?wsdl"
					  showBusyCursor="true">
			<s:operation name="searchAllProductos"
						 fault="operation1_faultHandler(event)"
						 result="operation1_resultHandler(event)">
				
			</s:operation>
		</s:WebService>
		<s:XMLListCollection id="productlist" source="{xmlproduct.producto}"/>
		<mx:CurrencyFormatter id="cf" currencySymbol="$" alignSymbol="left" precision="2" useThousandsSeparator="true"
							  useNegativeSign="true"/>
		<mx:NumberFormatter id="nf" precision="0" rounding="none"/>
		<s:ArrayCollection id="arrayDg"/>
	</fx:Declarations>
	<s:Label x="27" y="25" fontFamily="Verdana" fontSize="16" text="Producto:"/>
	<s:Label x="32" y="58" fontFamily="Verdana" fontSize="16" text="Precio $:"/>
	<s:TextInput id="txtpreciop" x="107" y="46" width="187" fontSize="16" fontWeight="bold"
				 maxChars="6" restrict="0-9."/>
	<s:Label x="23" y="99" fontFamily="Verdana" fontSize="16" text="Cantidad:"/>
	<controls:MaskedTextInput id="mskcantidad" x="108" y="89" width="55" fontFamily="Verdana"
							  fontSize="16" fontWeight="bold" maxChars="3" restrict="0-9"/>
	<mx:AdvancedDataGrid id="adglistpedprod" x="23" y="127" width="645" height="195"
						 dataChange="adglistpedprod_dataChangeHandler(event)"
						 designViewDataType="flat" doubleClickEnabled="true"
						 editable="item group summary" fontFamily="Verdana" fontSize="15"
						 itemDoubleClick="adglistpedprod_itemDoubleClickHandler(event)" rowCount="8">
		<mx:columns>
			<mx:AdvancedDataGridColumn width="40" dataField="id" editable="false"
									   fontFamily="Verdana" headerText="Codigo" resizable="false"
									   textAlign="left" textDecoration="none"/>
			<mx:AdvancedDataGridColumn width="80" dataField="name" editable="false"
									   fontFamily="Verdana" headerText="Descripcion"
									   resizable="false" textAlign="left"/>
			<mx:AdvancedDataGridColumn width="30" dataField="countt" editable="true"
									   fontFamily="Verdana" headerText="Cantidad" resizable="false"
									   sortable="false" textAlign="center"/>
			<mx:AdvancedDataGridColumn width="40" dataField="price" draggable="false" editable="true"
									   fontFamily="Verdana" formatter="{cf}" headerText="Precio"
									   resizable="false" sortable="false" textAlign="center"/>
			<mx:AdvancedDataGridColumn width="50" color="red" dataField="subtotal" draggable="false"
									   editable="false" fontFamily="Verdana" fontWeight="bold"
									   formatter="{cf}" headerText="SubTotal" resizable="false"
									   sortable="false" textAlign="right"/>
		</mx:columns>
	</mx:AdvancedDataGrid>
	<components:AutoComplete id="cmbproduct" x="107" y="11" width="203" allowDuplicates="false"
							 dropDownRowCount="10" fontSize="16" fontWeight="bold"
							 labelField="descripcion" matchType="beginning">
	</components:AutoComplete>
	<s:Label x="447" y="325" color="#1D7F03" fontFamily="Verdana" fontSize="16" fontWeight="bold"
			 text="TOTAL $ " verticalAlign="top"/>
	<s:Label id="lblTotGral" x="540" y="322" width="124" color="#127B1A" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" textAlign="right" verticalAlign="bottom"/>
</s:Group>
