<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:clients="com.components.clients.*"
		 xmlns:products="com.components.products.*"
		 xmlns:controls="com.adobe.flex.extras.controls.*"
		 xmlns:components="com.hillelcoren.components.*"
		 width="1220" height="608" initialize="group1_initializeHandler(event)" creationComplete="group1_creationCompleteHandler(event)">
	
	<fx:Script>
		<![CDATA[
			import com.components.clients.GuardarDatosPersonalClientePopup;
			import com.components.clients.PopupClienteNameSecondName;
			
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.IFocusManager;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;

			[Bindable]
			private var xmlListEmpleados:XMLList;
			[Bindable]
			private var xmltarjetas:XMLList;
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			import popus.Progress;
			
			import spark.components.TitleWindow;
			[Bindable]
				public var xmlcliente:XMLList;
			[Bindable]
				private var cliente:XMLList;
			
			
			private var popup:Progress;
			
			
			
			
			
			public var secondName:PopupClienteNameSecondName;
			
			protected function mskdocu_enterHandler(event:FlexEvent):void
			{
				
				popup=Progress(PopUpManager.createPopUp(this,Progress,true));
				PopUpManager.centerPopUp(popup);
				
				cli.getCustomerDocNumber(int(mskdocu.text));
				
			}
			
			protected function operationFaultGetClient(event:FaultEvent):void
			{
				PopUpManager.removePopUp(popup);
				Alert.show("Error en el Servidor!!!");
				
			}
			
			protected function operationResultGetClient(event:ResultEvent):void
			{
				
				PopUpManager.removePopUp(popup);
				
				cliente = new XMLList(event.result);				
				
				if(event.result.toString().indexOf("Cliente no encontrado")!=-1){
					Alert.show("CLIENTE NO ENCOTRADO");
					return;
				}
				
				
				
				
				txtNombreCliente.text=String(cliente.nombre);
				txtApellidoCliente.text=String(cliente.apellido);
				lblnocli.text=cliente.id;
				
				focusManager.setFocus(productoComponente.cmbproduct);
				
			}
			
			
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			private function transferirFocus(keypress:KeyboardEvent):void{
				if(keypress.keyCode==Keyboard.ENTER){					
					if(keypress.currentTarget.toString().indexOf("txtApellidoCliente")!=-1 && txtApellidoCliente.text.length >= 4 && txtNombreCliente.text.length >=4){						
						popup=Progress(PopUpManager.createPopUp(this,Progress,true));
						PopUpManager.centerPopUp(popup);
						cli.searchClientForNameAndLastName(txtNombreCliente.text.toString(),txtApellidoCliente.text.toString());						
							}else{
										if(keypress.currentTarget.toString().indexOf("txtNombreCliente")!=-1 && txtNombreCliente.text.length>=4)
											txtApellidoCliente.setFocus();			
									    else{
												if(keypress.currentTarget.toString().indexOf("cmbTarjetasCreditoDebito")!=-1 && cmbTarjetasCreditoDebito.text.length>0)
													txtNumeroCuponPago.setFocus();
												else{
													if(keypress.currentTarget.toString().indexOf("dtfentrega")!=-1 && dtfentrega.text.length>0){
														cmbVendedores.setFocus();
													}else{
														if(keypress.currentTarget.toString().indexOf("cmbVendedores")!=-1 && cmbVendedores.selectedItemId>=0){
																if(cmbVendedores.selectedItem.estado==0)
																	avisoCartelVendedorDeshabilitado();
																else
																	txtpassword.setFocus();
														}else{
															if(keypress.currentTarget.toString().indexOf("txtpassword")!=-1 && txtpassword.text.length>0)
																btnGuardarNota.setFocus();
														
														    }
												
													}
												}
							
										}
					
					
					
				
					
				}
				
				
					
					
							if(keypress.currentTarget.toString().indexOf("btnGuardarNota")!=-1&&txtpassword.text.length>0&&btnGuardarNota.enabled==true){
								btnGuardarNotaEvent();
							}
			  }//end if Enter
				
				
					if(txtNumeroCuponPago.text.length==0&&Number(cmbTarjetasCreditoDebito.selectedItem.id)==0){
						rdbenefectivosi.selected=true;
						
					}else{
							if(txtNumeroCuponPago.text.length==0&&Number(cmbTarjetasCreditoDebito.selectedItem.id)>0){
									rdbenefectivono.selected=true;									
									
									cmbTarjetasCreditoDebito.removeItemAt(cmbTarjetasCreditoDebito.selectedItemId);
									cmbTarjetasCreditoDebito.selectedItem.id=0;
								
							}else{
									if(Number(cmbTarjetasCreditoDebito.selectedItem.id)!=0&&txtNumeroCuponPago.text.length<16){
										rdbenefectivono.selected=true;
										
									}else{
										if(Number(cmbTarjetasCreditoDebito.selectedItem.id)!=0&&txtNumeroCuponPago.text.length==16){
											rdbenefectivono.selected=true;											
											cmbTarjetasCreditoDebito.selectedItem.id=0;
										}
									}
										
							}
					
				}
			}
			protected function avisoCartelVendedorDeshabilitado():void{
			
				Alert.show("El vendedor está deshabilitado\n para realizar esta operación!!!");
			}
			protected function operationFaultSearchClient(event:FaultEvent):void
			{
				PopUpManager.removePopUp(popup);
				Alert.show("Error en el Servidor, verifique!!!");	
				
			}
			
			protected function operationResultSearchClient(event:ResultEvent):void
			{
				PopUpManager.removePopUp(popup);
				productoComponente.cmbproduct.setFocus();
				
				xmlcliente =new XMLList(event.result);
				
				//**************************************************popupWindows++++++++++++++++++++++++++++++++++
				
				displayPopup();		
				
				
				//***********************************************************************************************
				
				
			}
			//***********************************************************************
			public function displayPopup():void{
				var pop1:PopupClienteNameSecondName=PopupClienteNameSecondName(PopUpManager.createPopUp(this,PopupClienteNameSecondName,true));
				
				/*+Set TitleWindows properties+*/
				pop1.title="Seleccione un Registro";
				pop1.showCloseButton=true;
				
				/*Set properties to custom component popup*/
				pop1.targetCodeCustomer=lblnocli;
				pop1.targetName=txtNombreCliente;
				pop1.targetNumCustomer=mskdocu;
				pop1.targetSecondName=txtApellidoCliente;
				pop1.clidata=xmlcli;
				PopUpManager.centerPopUp(pop1);
				
				
				
				
			}
			//***********************************************************************
			public function windows_Popup_close(evt:CloseEvent):void{
				PopUpManager.removePopUp(evt.currentTarget as IFlexDisplayObject);
				
			}
			
			protected function btnInserCliente_clickHandler(event:MouseEvent):void
			{
				displayPopupCustomerPersonalData();
			}
			public function displayPopupCustomerPersonalData():void{
				var popup2:GuardarDatosPersonalClientePopup=GuardarDatosPersonalClientePopup(PopUpManager.createPopUp(this,GuardarDatosPersonalClientePopup,true));
				
				popup2.title="  Ingrese Datos Personales de Cliente  ";
				
				popup2.idcliente=lblnocli;
				popup2.nombre=txtNombreCliente;
				popup2.apellido=txtApellidoCliente;
				popup2.nrodocu=mskdocu;				
				PopUpManager.centerPopUp(popup2);
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			protected function btnCloseClientComponent_clickHandler(event:MouseEvent):void
			{
				this.removeAllElements();	
			}
			//*************************************************************************************++
			
			
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				mskdocu.setFocus();
				txtApellidoCliente.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtNombreCliente.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				cmbTarjetasCreditoDebito.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				cmbVendedores.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				btnGuardarNota.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtNumeroCuponPago.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtpassword.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				cmbTarjetasCreditoDebito.selectedItemId=0;
			
			}
			
			protected function operation1_resultHandler(event:ResultEvent):void
			{
				xmltarjetas=new XMLList(event.result);
				cmbTarjetasCreditoDebito.dataProvider=tarjetas;
				
			}
			
			protected function operation1_faultHandler(event:FaultEvent):void
			{
				Alert.show("   Se produjo un error al querer obtener el listado de tarjetas de crédito y débito!!!   ");
				
			}
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				wstarjetascreditodebito.searchAllTarjetasCreditoDebito();
				wsempleados.selectAllEmpleados();
			}
			//--------------------------------------------------------------------------------------------------------------------------------
			protected function verificarProductosCargados():void{
				
				
								if(dtfentrega.text.length>0){
												
												if(productoComponente.arrayDg.length>0){
													//*******************************************************************
													var b:Boolean=false;
													for(var j:int=0;j<productoComponente.arrayDg.length&&!b;j++){
														//controlamos que no haya descuento por producto y total a la vez en la nota de pedido
														if(productoComponente.porc_d>0 && productoComponente.arrayDg[j].porc_desc!=0 && productoComponente.porc_d!=0){
															Alert.show("Error al procesar los datos, el descuento es Total o por Productos, corrija!!!");
															return;
														}
														//controlamos que los separadores decimales no sean comas
														if(String(productoComponente.arrayDg[j].porc_desc).toString().indexOf(",")!=-1||String(productoComponente.arrayDg[j].price).toString().indexOf(",")!=-1)
															b=true;
															
														
														
														
													}
													//*******************************************************************
													if(!b)	
														Alert.show("   Desea Guardar Nota De Pedido Actual?","Confirmar Operación   ", Alert.YES | Alert.NO, this, guardarNotaPedido, null, Alert.NO);
													else
														Alert.show("   Corrija la grilla de Productos, el separador decimal es el punto y no la coma!!!   ");
													
												}else
													Alert.show("   NO HAY PRODUCTOS LISTADOS!!!   ");		
								}else
									Alert.show("   Debe Seleccionar la fecha de Entrega   ");
								
				
			}
			//***************************************************************************************************
			protected function chequearNumeroCupon():Boolean{
					if(cmbTarjetasCreditoDebito.selectedItem.id!=0&&txtNumeroCuponPago.length==0)
						return true;
					else
						return false;
			
			}
			//***************************************************************************************************
			protected function btnGuardarNotaEvent():void{
						
				
				if(rdbentregadosi.selected&&Number(productoComponente.lblsaldo.text)>0){
					Alert.show("IMPOSIBLE ALMACENAR NOTA DE PEDIDO \nLA NOTA FIGURA COMO ENTREGADA PERO AÚN NO HA SIDO CANCELADA O SALDADA!!!");
				}else{
					if(rdbcanceladaNotasi.selected&&Number(productoComponente.lblsaldo.text)>0){
						Alert.show("IMPOSIBLE ALMACENAR NOTA DE PEDIDO \nLA NOTA FIGURA COMO CANCELADA PERO AÚN NO HA SIDO CANCELADA O SALDADA!!!");
					}else{
				
							if(int(productoComponente.lblTotApagar.text)<=-1)
								Alert.show("IMPOSIBLE ALMACENAR NOTA DE PEDIDO \nCORRIJA POR FAVOR!!!");
							else{
								//*****************************Chequerar que haya una fecha cargada*************************************
								if(dtfentrega.text.length==0){
									Alert.show("DEBE SELECCIONAR UNA FECHA DE ENTREGA");
									return;
								}else{
								//********************************Chequeamos que haya un Vendedor Seleccionado en el ComboBox++++++++++++++++++++++++
								
											if(cmbVendedores.text.length==0){
												Alert.show("DEBE SELECCIONAR UN VENDEDOR");
												return;
											}else{
												//chequeo si el vendedor está habilitado por sistema para realizar esta operación
												if(cmbVendedores.selectedItem.estado==0){
													avisoCartelVendedorDeshabilitado();
													return;
												}else{
													//chequear el vendendor seleccionado con su clave correspondiente
													
													if(chkpassEmployee()){
														
														//*************************Chequeamos que haya un cliente ya seleccionado********************++
														
														if(txtNombreCliente.text.length>0&&txtApellidoCliente.text.length>0){
															if(chequearNumeroCupon())
																Alert.show("Falta Ingresar un Número de Cupón");
															else
																verificarProductosCargados();
															
														}
														//********************************************************************************************
													}
												}
												
											}
								}
							}
					}
				}
			
			}
			//***************************************************************************************************
			protected function btnGuardarNota_clickHandler(event:MouseEvent):void
			{
			
				btnGuardarNotaEvent();
			}
		protected function guardarNotaPedido(evt:CloseEvent):void{
			if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
			
			//mostramos al cliente un popup de espera
				popup=Progress(PopUpManager.createPopUp(this,Progress,true));
				PopUpManager.centerPopUp(popup);
			//llamamos al metodo del webservice para almacenar la nota de pedido en el servidor
			
				
			wsnotapedido.agregarNotaPedido(getDatosXML());
				
             			
						
		
		}	
		//****************************************************************************************************
		protected function getDatosXML():String{
			var entregado:int=0;
			var canceladaNota:int=0;
			var stockFuturo:int=0;			
			var anulada:int=0;
			var enfectivo:int=0;
			var porcdescAcum:Number=0;
			var temp_tot_Gral:Number=0;
			var temp_tot_porc_desc:Number=0;
			var temp_tot_desc:Number=0;
			var enEfectivo:Number = 0;			
			var calcularTotalAPagar:Number=productoComponente.totGral-temp_tot_desc;
			var recargo:Number=productoComponente.tot_recargo*Number(calcularTotalAPagar.toFixed(3))/100;
			
					for(var i:int=0;i<productoComponente.arrayDg.length;i++){
						
						temp_tot_desc+=Number(Number(productoComponente.arrayDg[i].prec_descuento).toFixed(3));
						if(productoComponente.desc_resto>0&&Number(productoComponente.arrayDg[i].porc_desc)>0)
							productoComponente.arrayDg[i].porc_desc="0.00";
						else				
						   temp_tot_porc_desc+=Number(Number(productoComponente.arrayDg[i].porc_desc).toFixed(3));		
						
					}		
			
			

			if(temp_tot_desc>0){
				
				//*********************************************************************************************************+++
				productoComponente.lbldescuento.text=Number(-temp_tot_desc).toFixed(3);
						
						if(productoComponente.tot_recargo>0){
							
							productoComponente.lbltotalconrecargo.text=Number(Number(calcularTotalAPagar.toFixed(3))+recargo).toFixed(3);
							
							productoComponente.lblTotApagar.text=Number(Number(calcularTotalAPagar.toFixed(3))+recargo).toFixed(3);
							
						}else
							productoComponente.lblTotApagar.text=Number(productoComponente.totGral-temp_tot_desc).toFixed(3);
						
							if(int(productoComponente.mskAnticipo.text)>0){
								productoComponente.lblsaldo.text=Number(Number(productoComponente.lblTotApagar.text)-Number(productoComponente.mskAnticipo.text)).toFixed(3);
							}else{
								productoComponente.lblsaldo.text="0.000";
							}
						
						productoComponente.porc_desc_total=temp_tot_porc_desc;
						//******************************************************************************************************
			}else{
				//********************************************************************----------------------------------------------
						if(productoComponente.tot_recargo>0){
							productoComponente.lblTotApagar.text=Number(productoComponente.totGral-productoComponente.totGralDesc+(recargo)).toFixed(3);
							productoComponente.lbltotalconrecargo.text=Number(productoComponente.totGral-productoComponente.totGralDesc+(recargo)).toFixed(3);
						}else{
							productoComponente.lblTotApagar.text=Number(productoComponente.totGral-productoComponente.totGralDesc).toFixed(3);
						}
						if(int(productoComponente.mskAnticipo.text)>0){
							
							productoComponente.lblsaldo.text=Number(Number(Number(productoComponente.totGral-productoComponente.totGralDesc)-(Number(productoComponente.mskAnticipo.text)))+recargo).toFixed(3);
							
						}else{
							productoComponente.lblsaldo.text="0.000";
						}
				
					productoComponente.porc_desc_total=Number(Number(productoComponente.txtdescuento.text).toFixed(2));
				//*****************************************************------------------------------------------------------------
			}
			if(cmbTarjetasCreditoDebito.selectedItem.id!=0&&txtNumeroCuponPago.text.length==16){
				
			
			}
						if(productoComponente.txtdescuento.text.length==0)
							productoComponente.txtdescuento.text="0.0";
						
							
						if(productoComponente.mskrecargo.text.length==0)
							productoComponente.mskrecargo.text="0.0";
						
						if(productoComponente.mskAnticipo.text.length==0)
							productoComponente.mskAnticipo.text="0.0";
			
					var pendiente:int=1;
					
					if(rdbentregadosi.selected){
						entregado=1;
						pendiente=0;
					}
			
					if(rdbcanceladaNotasi.selected)
						 canceladaNota=1;
			
			
					if(rdbstockFuturosi.selected)
						stockFuturo=1;
			
				
			
					if(rdanuladasi.selected)
						anulada=1;
						
			
					if(rdbenefectivosi.selected)
						enfectivo=1;
					
			if(productoComponente.chkAnticipoEfectivo.enabled){
				enEfectivo = 1;
			}
			
			
			
			
			var xmlNota:String="<notapedido>\n" +
				"<idnota>0</idnota>\n" +
				"<vendedor>" +cmbVendedores.selectedItem.id+"</vendedor>\n"+
				"<personas>\n" +
					"<id>"+lblnocli.text+"</id>\n" +
					"<numerodocu>"+mskdocu.text+"</numerodocu>\n" +
				"</personas>\n" +
				"<tarjetacredito>\n" +
					"<id_tarjeta>"+cmbTarjetasCreditoDebito.selectedItem.id+"</id_tarjeta>\n" +
				"</tarjetacredito>\n" +
				"<porcentaje>\n" +
					"<id_porcentaje>1</id_porcentaje>\n" +
				"</porcentaje>\n" +
				"<montototal>"+productoComponente.lblTotGral.text+"</montototal>\n" +
				"<anticipo>"+productoComponente.mskAnticipo.text+"</anticipo>\n" +
				"<anticipoacum>0</anticipoacum>\n" +
				"<saldo>"+productoComponente.lblsaldo.text+"</saldo>\n";
			
				if(entregado==1){
					xmlNota+="<entregado>"+entregado+"</entregado>\n" +
					"<id_usuario_entregado>"+cmbVendedores.selectedItem.id+"</id_usuario_entregado>\n";
				}else{
						xmlNota+="<entregado>0</entregado>\n" +
							"<id_usuario_entregado>0</id_usuario_entregado>\n" ;
				}
				
				xmlNota+="<id_usuario_expidio_nota>"+cmbVendedores.selectedItem.id+"</id_usuario_expidio_nota>\n" +
				"<stockFuturo>"+stockFuturo+"</stockFuturo>\n" ;
				
						if(anulada==1){
							xmlNota+="<anulado>"+anulada+"</anulado>\n" +
							"<id_usuario_anulado>"+cmbVendedores.selectedItem.id+"</id_usuario_anulado>\n" ;
						}else{
							xmlNota+="<anulado>0</anulado>\n" +
							"<id_usuario_anulado>0</id_usuario_anulado>\n" ;								
						}
				
						if(canceladaNota==1){
							xmlNota+="<cancelado>"+canceladaNota+"</cancelado>\n" +
							"<id_usuario_cancelo_nota>"+cmbVendedores.selectedItem.id+"</id_usuario_cancelo_nota>\n" ;
						}else{
							xmlNota+="<cancelado>0</cancelado>\n" +
								"<id_usuario_cancelo_nota>0</id_usuario_cancelo_nota>\n" ;
						}
				
				xmlNota+="<descuentonota>"+Number(productoComponente.lbldescuento.text).toFixed(3)+"</descuentonota>\n" ;
				
					if(Number(Number(productoComponente.mskdescuentopesos.text).toFixed(3))>0)
						xmlNota+="<descuentopesos>" +Number(productoComponente.mskdescuentopesos.text).toFixed(3)+"</descuentopesos>\n";
					else
						xmlNota+="<descuentopesos>0</descuentopesos>\n";
					
				xmlNota+="<porcentajerecargo>"+productoComponente.tot_recargo+"</porcentajerecargo>\n" +
					
				"<montototalapagar>"+productoComponente.lblTotApagar.text+"</montototalapagar>\n"+
				"<observaciones>" +this.txtObservacionesNota.text+"</observaciones>\n" +
				"<pendiente>"+pendiente+"</pendiente>\n"+
				"<montoiva>0</montoiva>\n"+
				"<recargo>"+productoComponente.lbltotalconrecargo.text+"</recargo>\n" +
				
				"<fechaentrega>"+dtfentrega.text+"</fechaentrega>\n"+
				"<fechacompra></fechacompra>\n"+
				"<numerodecupon>"+txtNumeroCuponPago.text+"</numerodecupon>\n" +
				"<enefectivo>"+enfectivo+"</enefectivo>\n"+
				"<enefectivoAnticipo>"+enfectivo+"</enefectivoAnticipo>\n"+
				"<detallesnotapedido>\n" ;
									
							for(var ii:int=0;ii<productoComponente.arrayDg.length;){
								
								if(productoComponente.arrayDg[ii].price==0||productoComponente.arrayDg[ii].countt==0||productoComponente.arrayDg[ii].subtotal==0)
									ii++;
								else{
									porcdescAcum+=Number(Number(productoComponente.arrayDg[ii].porc_desc).toFixed(2));
									xmlNota+="<itemdetallesnota>\n" +
												"<cantidad>"+productoComponente.arrayDg[ii].countt+"</cantidad>\n" +
												"<preciocondescuento>"+productoComponente.arrayDg[ii].prec_descuento+"</preciocondescuento>\n" +
												"<precio>"+productoComponente.arrayDg[ii].price+"</precio>\n" +
												"<subtotal>"+Number(productoComponente.arrayDg[ii].subtotal).toFixed(3)+"</subtotal>\n" +									
												"<entregado>"+entregado+"</entregado>\n" +
												"<cancelado>"+canceladaNota+"</cancelado>\n" +
												"<anulado>"+anulada+"</anulado>\n" +
												"<pendiente>"+pendiente+"</pendiente>\n" +
												"<descuento>"+Number(productoComponente.arrayDg[ii].porc_desc).toFixed(2)+"</descuento>\n" +
												"<iva>0</iva>\n" +
												"<id_nota>0</id_nota>\n" +
												"<id_producto>"+productoComponente.arrayDg[ii].id+"</id_producto>\n" +
											"</itemdetallesnota>\n" ;
									ii++
								}
								
							}
			
			
			
				 xmlNota+= "</detallesnotapedido>\n" +
					 "<porc_descuento_total>"+Number(productoComponente.porc_desc_total).toFixed(2)+"</porc_descuento_total>\n" +
				  "</notapedido>\n";
				 
				 return xmlNota;
		
		
		}	
		//****************************************************************************************************	
			
			protected function operationNota_faultHandler(event:FaultEvent):void
			{
				PopUpManager.removePopUp(popup);
				Alert.show("ERROR EN EL SERVIDOR AL AGREGAR NOTA DE PEDIDO");
				
			}
			
			protected function operationNota_resultHandler(event:ResultEvent):void
			{
				PopUpManager.removePopUp(popup);
				var nro:Number=int(event.result.toString());
				
				
				switch(nro)
				{
					case -1:
					{
						Alert.show("   Error en metodo agregarNotaPedido, verifique   ");	
						break;
					}
					case -2:
					{
						Alert.show("   Error en metodo almacenarnota, EJBNotaPedido   ");	
						break;
					}	
					case -3:
					{
						Alert.show("   Error en metdodo almacenardetallenota   ");	
						break;
					}
					case -4:
					{
						Alert.show("   Error en metodo almacenarhistorico   ");	
						break;
					}
					case 0:
					{
						Alert.show("   No pasó nada, verifique!!!   ");	
						break;
					}	
					case -5:{
						Alert.show("  DATOS NO ENVIADOS  ");
						break;
					}	
					default:
					{
						
						var source:String="http://192.168.1.101:8080/WebMelanie2/ShowReportNotaPedido?nronota="+nro;
						var urlReq:URLRequest= new URLRequest(source);
						navigateToURL(urlReq,"_blank");
						limpiarTodo();
						
						break;
					}
				}
				
			}
			protected function limpiarTodo():void{
				
				mskdocu.text="";
				lblapellido.text="";
				lblnocli.text="";
				txtpassword.text="";
				txtApellidoCliente.text="";
				txtNombreCliente.text="";
				txtNumeroCuponPago.text="";
				txtObservacionesNota.text="";
				rdbcanceladaNotano.selected=true;
				rdbcanceladaNotasi.selected=false;
				rdbenefectivono.selected=false;
				rdbenefectivosi.selected=true;
				rdbentregadono.selected=true;
				rdbentregadosi.selected=false;
				rdbstockFuturono.selected=false;
				rdbstockFuturosi.selected=true;
				cmbVendedores.selectedItemId=-1;
				cmbTarjetasCreditoDebito.selectedItemId=0;
				dtfentrega.text="";
				productoComponente.limpiarDetalleProductos();
				productoComponente.cmbproduct.selectedItemId=1;
				focusManager.setFocus(mskdocu);
				
				
				
			
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			private function formatDateTime(date:Date):String {
				return dtf.format(date);
			} 
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			
			protected function operation2_faultHandlerSelectAllEmpleados(event:FaultEvent):void
			{
				Alert.show("   ERROR AL OBTENER LISTADO DE EMPLEADOS   ");
				
			}
			
			protected function operation2_resultHandlerSelectAllEmpleados(event:ResultEvent):void
			{
				
				xmlListEmpleados = new XMLList(event.result);
				cmbVendedores.dataProvider=empleadoslist;
				
			}
			
			protected function txtpassword_enterHandler(event:FlexEvent):void
			{
				
				if(txtpassword.text.length>0){
					
					chkpassEmployee();
							
				}
				
			}
			protected function chkpassEmployee():Boolean{
				return wsempleados.checkPassEmployee(cmbVendedores.selectedItem.id,txtpassword.text);
			
			}
			
			protected function operation2_resultHandler(event:ResultEvent):void
			{
				var chkpasswordEmployeee:String = event.result.toString();
				
				switch(chkpasswordEmployeee)
				{
					case "false":
					{
						Alert.show("Clave de vendedor incorrecta.");
						if(btnGuardarNota.enabled==true){
							btnGuardarNota.enabled=false;
						}
						break;
					}
					case "Empleado no encontrado":
					{
						Alert.show("Empleado no encotrado.");
						if(btnGuardarNota.enabled==true){
							btnGuardarNota.enabled=false;
						}
						break;
					}
						
					default:
					{
						if(btnGuardarNota.enabled==false){
							btnGuardarNota.enabled=true;
						}
						
						break;
					}
				}
				
				
			}
			
			protected function operation2_faultHandler(event:FaultEvent):void
			{
				// TODO Auto-generated method stub
				Alert.show("Error al chequear las claves del Empleado.");
				
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:RadioButtonGroup id="GrupoEntregado"/>
		<s:RadioButtonGroup id="stockFuturo"/>
		<s:RadioButtonGroup id="notaCancelada"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:WebService id="wsnotapedido" wsdl="http://192.168.1.101:8080/ServiceNotaPedido/NotaPedidoWs?WSDL">
			<s:operation name="agregarNotaPedido" fault="operationNota_faultHandler(event)"
						 result="operationNota_resultHandler(event)">
				
			</s:operation>
		</s:WebService>
		<s:WebService id="wstarjetascreditodebito" 
					  wsdl="http://192.168.1.101:8080/ServiceTarjetas/TartjetasWs?WSDL" showBusyCursor="false"
					  >
			<s:operation name="searchAllTarjetasCreditoDebito" result="operation1_resultHandler(event)" fault="operation1_faultHandler(event)">
				
			</s:operation>
		</s:WebService>
		<s:WebService wsdl="http://192.168.1.101:8080/ServiceClientes/ClientesWs?WSDL"
					  id="cli" showBusyCursor="false">
			<s:operation fault="operationFaultGetClient(event)"
						 result="operationResultGetClient(event)" 
						 name="getCustomerDocNumber">
				
			</s:operation>
			<s:operation fault="operationFaultSearchClient(event)" 
						 result="operationResultSearchClient(event)"
						 name="searchClientForNameAndLastName">
				
			</s:operation>
			
		</s:WebService>
		<s:WebService id="wsempleados" wsdl="http://192.168.1.101:8080/ServicesEmpleados/EmpleadosWs?WSDL" showBusyCursor="false">
			<s:operation name="selectAllEmpleados"
						 fault="operation2_faultHandlerSelectAllEmpleados(event)"
						 result="operation2_resultHandlerSelectAllEmpleados(event)">
				
			</s:operation>
			<s:operation name="checkPassEmployee"
						 result="operation2_resultHandler(event)"
						 fault="operation2_faultHandler(event)">
				
			</s:operation>
		</s:WebService>
		<s:DateTimeFormatter id="dtf" dateTimePattern="dd/MM/yyyy"/>
		<s:XMLListCollection id="xmlcli" source="{xmlcliente.item}"/>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:XMLListCollection id="tarjetas" source="{xmltarjetas.item}"/>
		<s:XMLListCollection id="empleadoslist" source="{xmlListEmpleados.item}"/>
	</fx:Declarations>
	
	
	<s:TextArea id="txtObservacionesNota" x="410" y="134" width="790" height="111" enabled="true"
				fontSize="16" maxChars="32000"/>
	<s:Label x="409" y="117" fontSize="14" fontWeight="bold" text="Observaciones:"/>
	<controls:MaskedTextInput id="txtNumeroCuponPago" x="364" y="80" width="184" fontFamily="Verdana"
							  fontSize="16" inputMask="####-####-####-####" maxChars="19"
							  toolTip="Ingrese en Número de Tarjeta de Crédito o Débito del Plástico"/>
	<s:Label x="362" y="64" fontSize="14" fontWeight="bold"
			 text="Número de cupón tarjeta de credito/debito:"/>
	<components:AdvancedAutoComplete id="cmbTarjetasCreditoDebito" x="363" y="30" width="292"
									 fontSize="16" labelField="descripcion"
									 toolTip="Seleccione una Tarjeta de Crédito o Débito si el cliente utiliza esta forma de pago!!!">
	</components:AdvancedAutoComplete>
	<s:Label x="362" y="16" fontSize="14" fontWeight="bold" text="Tarjetas de Crédito / Débito" toolTip="Seleccione si o no para registrar que la nota de pedido fue entregada al Clliente"/>
	<s:Label x="905" y="15" fontSize="14" fontWeight="bold" text="Nota de pedido entregada"/>
	<s:Label x="703" y="15" fontSize="14" fontWeight="bold" text="Nota de pedido stock futuro"/>
	<s:VGroup x="705" y="27">
		<s:RadioButton id="rdbstockFuturosi" label="Si" groupName="stockFuturo" selected="true"/>
		<s:RadioButton id="rdbstockFuturono" label="No" groupName="stockFuturo"/>
	</s:VGroup>
	<s:Label x="705" y="71" fontSize="14" fontWeight="bold" text="Nota de pedido cancelada"/>
	<s:VGroup x="708" y="84">
		<s:RadioButton id="rdbcanceladaNotasi" label="Si" groupName="notaCancelada"/>
		<s:RadioButton id="rdbcanceladaNotano" label="No" selected="true" groupName="notaCancelada"/>
	</s:VGroup>
	<s:Button id="btnCloseClientComponent" x="1173" y="10" width="27" height="19" icon="assets/icon_close.png" click="btnCloseClientComponent_clickHandler(event)"/>
	<s:Label x="20" y="39" height="15" fontSize="16" fontWeight="bold" text="Documento:"/>
	<controls:MaskedTextInput id="mskdocu" x="116" y="34" enter="mskdocu_enterHandler(event)"
							  fontFamily="Verdana" fontSize="20" inputMask="########" maxChars="8"
							  restrict="0-9" toolTip="Ingrese Número de Documento!!!"/>
	<s:Label x="46" y="97" fontSize="16" fontWeight="bold" text="Nombre:"/>
	<s:Label x="33" y="64" fontSize="16" fontWeight="bold" text="Cliente N°:"/>
	<s:Label id="lblnocli" x="115" y="62" width="187" fontFamily="Verdana" fontSize="18"
			 fontWeight="bold" verticalAlign="bottom"/>
	<s:TextInput id="txtNombreCliente" x="114" y="85" width="188" fontSize="18" maxChars="40"
				 prompt="Ingrese Nombre..." restrict="A-ÑZa-ñz " />
	<s:Label id="lblapellido" x="43" y="128" fontSize="16" fontWeight="bold" text="Apellido:"/>
	<s:TextInput id="txtApellidoCliente" x="113" y="118" width="189" fontSize="18" maxChars="40"
				 prompt="Ingrese Apellido..." restrict="A-ÑZa-ñz "/>
	<s:Button id="btnInserCliente" x="29" y="468" width="134" height="30" label="DatosCliente"
			  click="btnInserCliente_clickHandler(event)" fontSize="16"
			  toolTip="Muestra una Ventana para Ingresar Datos Personales de un Cliente"/>

	<s:Button id="btnGuardarNota" x="29" y="501" width="134" height="30" label="Guardar Nota"
			  click="btnGuardarNota_clickHandler(event)" enabled="true" fontSize="16"
			  toolTip="Guarda la Nota de Pedido con todos Sus Datos"/>
	<products:ProductosPedidosNota id="productoComponente" x="4" y="166" height="434"/>
	<s:RadioButton id="rdbentregadosi" x="904" y="29" label="Si" groupName="GrupoEntregado"/>
	<s:RadioButton id="rdbentregadono" x="904" y="47" label="No" groupName="GrupoEntregado"
				   selected="true"/>
	<s:Label x="908" y="71" fontSize="14" fontWeight="bold" text="Nota anulada"/>
		
	<s:Label x="1005" y="70" fontSize="14" fontWeight="bold" text="Pago contado"/>
	
	<s:VGroup x="1005" y="87" width="43" height="55">
		<s:RadioButton id="rdbenefectivosi" label="Si" selected="true" groupName="enfectivo"/>
		<s:RadioButton id="rdbenefectivono" label="No" groupName="enfectivo"/>
	</s:VGroup>
	
	<s:VGroup x="909" y="87" width="45" height="57">
		<s:RadioButton id="rdanuladasi" label="Si" groupName="anulada"/>
		<s:RadioButton id="rdanuladano" label="No" selected="true" groupName="anulada"/>
	</s:VGroup>
	<mx:DateField id="dtfentrega" x="953" y="355" width="187" disabledDays="[0]"
				  disabledRanges="{[{rangeEnd: new Date((new Date()).getTime() - (1000*60*60*24))}]}"
				  fontSize="16" labelFunction="formatDateTime" parseFunction="{null}"
				  selectableRange="{{rangeStart : new Date()}}" toolTip="Seleccione la fecha de entrega"/>
	<s:Label x="951" y="340" fontSize="14" fontWeight="bold" text="Fecha de entrega"/>
	<s:Label x="951" y="394" fontSize="16" fontWeight="bold" text="VENDEDORES:"/>
	<components:AutoComplete id="cmbVendedores" x="951" toolTip="Seleccione un Empleado" prompt="Seleccione el empleado..." y="409" width="246" labelField="nameuser" allowDuplicates="false" dropDownRowCount="10"
							 fontSize="16" fontWeight="bold" matchType="beginning">
	</components:AutoComplete>
	<s:Label x="953" y="446" fontFamily="Arial" fontSize="16" fontWeight="bold" text="PASSWORD:"/>
	<s:TextInput id="txtpassword" x="954" y="463" width="246" fontSize="16" fontStyle="normal" maxChars="15" restrict="[a-zA-Z0-9_-]"
				 prompt="Ingresar clave de vendedor..." displayAsPassword="true" skinClass="spark.skins.spark.TextInputSkin" enter="txtpassword_enterHandler(event)"/>
	
</s:Group>
