<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:products="com.components.products.*"
		 xmlns:controls="com.adobe.flex.extras.controls.*"
		 xmlns:components="com.hillelcoren.components.*"
		 width="1232" height="626" initialize="group1_initializeHandler(event)">
	<fx:Script>
		<![CDATA[
			import assets.DataGridUtil;
			
			import com.actions.CabeceraNota;
			import com.actions.Historico;
			import com.actions.detallesVerNotas;
			import com.components.products.datosProducto;
			
			import flashx.textLayout.formats.WhiteSpaceCollapse;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.AdvancedDataGridEvent;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.osmf.net.SwitchingRuleBase;
			
			import popus.Progress;
			
			
			private var popup:Progress;
			[Bindable]
			private var xmltarjetas:XMLList;
			
			[Bindable]
			private var xmlListEmpleados:XMLList;
			[Bindable]
			private var anticipo:Number=0;
			
			
			[Bindable]
			public var dp:Array=[];
			[Bindable]
			public var totGral:Number;
			[Bindable]
			public var totRecargo:Number;
			[Bindable]
			public var totGralDesc:Number;
			[Bindable]
			private var precio_desc:Number;
			[Bindable]
			public var porc_d:Number;
			[Bindable]
			public var porc_desc_total:Number=0;
			[Bindable]
			public var desc_resto:Number=0;
			[Bindable]
			public var tot_recargo_porc:Number=0;
			[Bindable]
			public var temp_tot_porc_desc:Number=0;
			[Bindable]
			private var indexPage:int=0;
			[Bindable]
			private static var SIZEPAGE:int=5;
			[Bindable]
			private var userexpidio:int=0;
			[Bindable]
			private var usercancelo:int=0;
			[Bindable]
			private var userentrego:int=0;
			[Bindable]
			private var useranulo:int=0;
			[Bindable]
			private var xmlproduct:XMLList;
			private var totalReg:int=0;
			[Bindable]
			private static var TOTALPAGES:int=0;
			[Bindable]
			private var pageEnum:int=0;
			[Bindable]
			private var xmlNotas:XMLList;
			[Bindable]
			private var detalles:detallesVerNotas;
			[Bindable]
			private var idcliente:int;
			[Bindable]
			private var nrodocucli:int;
			[Bindable]
			private var feentrega:String;
			[Bindable]
			private var stockfuturo:String;
			[Bindable]
			private var efectivo:String;
			[Bindable]
			private var idnota:int=0;
			
			
			
			
			/**
			 * metodo que se invoca como resultado de obtener desde la base de datos
			 * la cantidad de registros nota de pedido
			 * invocamos a seleccionar todas o al metodo que trae solo un puñado de las mismas
			 * */
			
			protected function operation1_resultHandler(event:ResultEvent):void
			{
				
				
				totalReg = int(event.result.toString());
				
				if(totalReg==0){
					Alert.show("   NO HAY NOTAS DE PEDIDO CARGADAS AÚN!!!   ");
				}else{
					
					if(totalReg<SIZEPAGE){
				
						wsnotas.selectAllNotas();
						if(totGral>0)
							limpiarControles();
					}else{
						
				
						last_btn.enabled=true;
						next_btn.enabled=true;
						first_btn.enabled=true;
						prev_btn.enabled=true;
						TOTALPAGES=int(totalReg/SIZEPAGE);		
						
						wsnotas.verNotasPedidoPaginadas(indexPage,SIZEPAGE);
						if(totGral>0)
							limpiarControles();
					}
				
				}
				
			}
			
			protected function operation1_faultHandler(event:FaultEvent):void
			{
				Alert.show("   ERROR AL BUSCAR CANTIDAD TOTAL DE\n NOTAS DE PEDIDO EN BASE DE DATOS   ");
			}
			
			protected function operation2_resultHandler(event:ResultEvent):void
			{
				
				
				xmlNotas=new XMLList(event.result);
				
				addgrid();
				adgNotas.selectedIndex=0;
				adgNotas.validateNow();
				addinfo();
			}
			
			//----------------------------------------------------------------------------------------------
			private function addgrid():void{
				// agrego la cabecera de la nota de pedido al grid
				var headerNota:CabeceraNota;
				adgNotas.dataProvider=notas;			
				
				

				if(detallenotas.length>0)
					detallenotas.removeAll();
				
				
				
				
				if(btnImprimir.enabled==false)
					btnImprimir.enabled=true;
				if(btnRegargarlistado.enabled==false)
					btnRegargarlistado.enabled=true;
				
				if(btnremover.enabled==false)
					btnremover.enabled=true;
				
				
				
				
			}
			//---------------------------------------------------------------------------------
			
			protected function operation2_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR VERIFIQUE");
				
			}
			
			protected function first_clickHandler(event:MouseEvent):void
			{
				if(indexPage==0){
					first_btn.enabled=false;
					prev_btn.enabled=false;
					last_btn.enabled=true;
					next_btn.enabled=true;
				}else{
					indexPage=0;
					wsnotas.verNotasPedidoPaginadas(indexPage,SIZEPAGE);
					first_btn.enabled=false;
					prev_btn.enabled=false;
					last_btn.enabled=true;
					next_btn.enabled=true;
					
					
				}
				
			}
			//-------------------------------------------------------------------------------------
			//-------------------------------------------------------------------------------------
			protected function prev_btn_clickHandler(event:MouseEvent):void
			{
				
				if(indexPage==0)
					first_clickHandler(event);
				else{
					indexPage--;
						if(last_btn.enabled==false){
							last_btn.enabled=true;
							next_btn.enabled=true;
						}
					  if(indexPage==0){
						first_btn.enabled=false;
						prev_btn.enabled=false;
						last_btn.enabled=true;
						next_btn.enabled=true;
						
					  }
					
					wsnotas.verNotasPedidoPaginadas(indexPage,SIZEPAGE);
					
					
				}
				
			}
			//-------------------------------------------------------------------------------------------
			//-------------------------------------------------------------------------------------------
			protected function next_btn_clickHandler(event:MouseEvent):void
			{
				
				if(indexPage==TOTALPAGES)
					last_clickHandler(event);
				else{
					indexPage++;
					if(first_btn.enabled==false){
						first_btn.enabled=true;
						prev_btn.enabled=true;
					}
					if(indexPage==TOTALPAGES){
						last_btn.enabled=false;
						next_btn.enabled=false;
						first_btn.enabled=true;
						prev_btn.enabled=true;
					}
					
					wsnotas.verNotasPedidoPaginadas(indexPage,SIZEPAGE);
					
				}
				
			}
			//-------------------------------------------------------------------------------------------------------
			//-------------------------------------------------------------------------------------------------------
			protected function last_clickHandler(event:MouseEvent):void
			{
				if(indexPage==TOTALPAGES){
					last_btn.enabled=false;
					next_btn.enabled=false;
					first_btn.enabled=true;
					prev_btn.enabled=true;
				}else{
					indexPage=TOTALPAGES;
					wsnotas.verNotasPedidoPaginadas(indexPage,SIZEPAGE);
					last_btn.enabled=false;
					next_btn.enabled=false;
					first_btn.enabled=true;
					prev_btn.enabled=true;
					
					
				}
				
			}
			//-------------------------------------------------------------------------------------------------------------
			
			protected function operation3_resultHandler(event:ResultEvent):void
			{
				xmlNotas=new XMLList(event.result);
				
				addgrid();
				adgNotas.selectedIndex=0;
				adgNotas.validateNow();
				addinfo();
				
			}
			
			protected function operation3_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR AL OBTENER LAS NOTAS ");
				
			}
			
			
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			private function formatDateTime(date:Date):String {
				return dtf.format(date);
			} 
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			protected function addinfo():void{
			
				var historico:Historico;
				
				if(btnEliminarNota.enabled==false)
					btnEliminarNota.enabled=true;
				
				lblnombreyapecli.text=String(notas[adgNotas.selectedIndex].cliente.apellidoynombre);
				nrodocucli=int(notas[adgNotas.selectedIndex].cliente.nrodocumento);
				idcliente=int(notas[adgNotas.selectedIndex].cliente.id);
				idnota=notas[adgNotas.selectedIndex].id;
				feentrega=String(notas[adgNotas.selectedIndex].fechaentrega);
				stockfuturo=String(notas[adgNotas.selectedIndex].stockfuturo);
				efectivo=String(notas[adgNotas.selectedIndex].efectivo);
				txtobservaciones.text=String(notas[adgNotas.selectedIndex].observaciones);
				cmbTarjetasCreditoDebito.selectedItemId=notas[adgNotas.selectedIndex].idtarjeta;
				txtnumerocuponpago.text=notas[adgNotas.selectedIndex].numerocupon;
				detallenotas.source=notas[adgNotas.selectedIndex].detallenota.itemdetalle;		
				
				mskdocumento.text=String(nrodocucli);
				
			
				
				desc_resto=Number(notas[adgNotas.selectedIndex].descuentopesos);
				
				if(Number(notas[adgNotas.selectedIndex].usuarioexpidionota)==Number(0))
					lblexpidiovendedor.text="-";
				else 
					lblexpidiovendedor.text=notas[adgNotas.selectedIndex].usuarioexpidionota;
				
				if(Number(notas[adgNotas.selectedIndex].usuariocancelonota)==Number(0))
					lblvendedocancelo.text="-";
				else
					lblvendedocancelo.text=notas[adgNotas.selectedIndex].usuariocancelonota;
				
				if(notas[adgNotas.selectedIndex].usuarioanulonota==0)
					lblvendedoranulo.text="-";
				else
					lblvendedoranulo.text=notas[adgNotas.selectedIndex].usuarioanulonota;
				
				if(Number(notas[adgNotas.selectedIndex].usuarioentregonota)==Number(0))
					lblvendedorentrego.text="-";
				else
					lblvendedorentrego.text=notas[adgNotas.selectedIndex].usuarioentregonota;
				
				mskrecargo.text=notas[adgNotas.selectedIndex].porcrecargo;
				
				userexpidio=notas[adgNotas.selectedIndex].idusuarioexpidionota;
				userentrego=notas[adgNotas.selectedIndex].idusuarioentregonota;
				usercancelo=notas[adgNotas.selectedIndex].idusuariocancelonota;
				useranulo=notas[adgNotas.selectedIndex].idusuarioanulonota;
				
				listhistoricoselected.source=notas[adgNotas.selectedIndex].detallehistorico.item;
				
				
				
							if(int(notas[adgNotas.selectedIndex].anulado)==0){
								rdanuladano.selected=true;
								
							}else{
								rdanuladasi.selected=true;
							}
							
							
							if(int(notas[adgNotas.selectedIndex].cancelado)==0)
									rdbcanceladanotano.selected=true;
							
							else
									rdbcanceladanotasi.selected=true;
							
				
							if(int(notas[adgNotas.selectedIndex].entregado)==0)
								rdbentregadono.selected=true;
							
							else
							
								rdbentregadosi.selected=true;
				
							if(listhistorico.length>0)								
								listhistorico.removeAll();
								
								
							
				
				//***********************************************************************************************************++
				
				anticipo=0;
				for (var j:int=0;j<listhistoricoselected.length;j++){
					//recorro la coleccion historico para mostrar los anticipo de la nota
					if(Number(listhistoricoselected[j].anticipo)>0){
						
						historico =new Historico();
						historico.anticipo=listhistoricoselected[j].anticipo;
						anticipo=anticipo+Number(Number(listhistoricoselected[j].anticipo).toFixed(3));
						historico.fecharegistro=listhistoricoselected[j].fecharegistro;
						
						listhistorico.addItem(historico);
						
					}
					
					
				}
				
				
				
				adghistorico.dataProvider=listhistorico;
				//*+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				
				
				
				addDetalles();
			
			}
			//-----------------------------------------------------------------------------------------------------
			protected function adgNotas_doubleClickHandler(event:MouseEvent):void
			{
				addinfo();
				
			}
			protected function addDetalles():void{
				
				
				
				
			var b:Boolean=false;
			
			
			
			while(dp.length>0){
					dp.pop();
			
			}
			
			
			
			
				for(var i:int=0;i<detallenotas.length;i++){
					
							detalles=new detallesVerNotas();
							detalles.code=detallenotas[i].producto.code;
							detalles.countt=detallenotas[i].cantidad;
							detalles.id=detallenotas[i].producto.id;
							detalles.idnota=detallenotas[i].idnota;
							detalles.name=detallenotas[i].producto.descripcion;
							detalles.price=detallenotas[i].precio;
							detalles.porc_desc=detallenotas[i].descuento;
							detalles.prec_descuento=detallenotas[i].preciocondescuento;
							detalles.subtotal=detallenotas[i].subtotal;
							
					if(int(detallenotas[i].descuento)>0&&b==false)
						b=true;
							
			
							
							
					detallenotasList.addItem(detalles);
					
							
					
					
					dp.push({idproduct:detallenotas[i].producto.code,id:detallenotas[i].producto.id,name:detallenotas[i].producto.descripcion,countt:detallenotas[i].cantidad,price:detallenotas[i].precio,porc_desc:detallenotas[i].descuento,prec_descuento:detallenotas[i].preciocondescuento,subtotal:detallenotas[i].subtotal,idnota:detallenotas[i].idnota});
					
					
							
				}
					
				if(b==false)
					txtdescuento.text=notas[adgNotas.selectedIndex].porcentajedesctotal;
				
				totGral=notas[adgNotas.selectedIndex].total;
				
				tot_recargo_porc=notas[adgNotas.selectedIndex].porcrecargo;
				totGralDesc=Math.abs(Number(notas[adgNotas.selectedIndex].descuentonota));
				porc_desc_total=notas[adgNotas.selectedIndex].porcentajedesctotal;
				totRecargo=notas[adgNotas.selectedIndex].recargototal;
				
			
				
				
				
				mskrecargo.text=notas[adgNotas.selectedIndex].porcrecargo;
				
				
				
				
				//************************************************************************************+
				//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				
				lblTotGral.text=totGral.toFixed(3);
				lbldescuento.text=Number(Number(notas[adgNotas.selectedIndex].descuentonota)).toFixed(3);
				lblTotApagar.text=Number(Number(notas[adgNotas.selectedIndex].montototalapagar)).toFixed(3);
				lblsaldo.text=Number(Number(notas[adgNotas.selectedIndex].saldo)).toFixed(3);
				lbltotalconrecargo.text=Number(Number(notas[adgNotas.selectedIndex].recargototal)).toFixed(3);
				
				
				
				
				
				
				
				
				//----------------------------------------------------------------------------------------------------------
				//**************************************************************************************
				
				
				
				
				detallenotasList.refresh();
				arrayDg.refresh();
				
				arrayDg.source=dp;
				
				adglistpedprod.dataProvider=arrayDg;
				
				
				
			
				
				
			
				
			
			
			}
			
			
			//------------------------------------------------------------------------------------------------
			protected function itemEditEndHandler(event:AdvancedDataGridEvent):void
			{
				// get a reference to the datagrid
				var grid:AdvancedDataGrid = event.target as AdvancedDataGrid;
				// get a reference to the name of the property in the
				// underlying object corresponding to the cell that's being edited
				var field:String = event.dataField;
				// get a reference to the row number (the index in the 
				// dataprovider of the row that's being edited)
				var row:Number = Number(event.rowIndex);
				// get a reference to the column number of
				// the cell that's being edited
				var col:int = event.columnIndex;
				var precio_descontado_result_porcentaje:Number=0;
				var precio:Number=0;
				var porcentajedescuento:Number=0;
				var decimal:Number=Math.pow(10,2);
				var temptot:Number=0;
				var tempPrecDesc:Number=0;
				var tempTotDesc:Number=0;
				var tempPorcDes:Number=0;
				
				
				
				
				if (grid != null)
				{
					
					// gets the value (pre-edit) from the grid's dataprovider
					var oldValue:Number = Number(grid.dataProvider.getItemAt(row)[field]);
					// you could also use the following line to get the value
					// directly from the cellrenderer that's showing the value
					// in the datagrid -- it's the same value.
					// That way you wouldn't need a reference to the DataGrid.
					//var oldValue = event.itemRenderer.data[field];
					// get the value (post-edit) from the item editor
					var newValue:Number = Number(grid.itemEditorInstance[grid.columns[col].editorDataField]);
					
					
					
					// check if the value has changed
					if (newValue != oldValue)
					{
						
						
						
						// do actions that should happen when the data changes
						// Note that in this case, the dataprovider
						// hasn't been updated yet, so you can't do any
						// actions that require the dataprovider to have 
						// the new data
						
						if(col==4){
							var priceValue:Number=(grid.selectedItem.price);
							var subtot1:Number=(grid.selectedItem.subtotal);
							
							
							//---------------------------------------------------------------------------------------------------------------------------------------
							if(col==4&&arrayDg.length==1&&newValue==0){
								
								grid.dataProvider.removeItemAt(grid.selectedIndex);
								
								totGral=0;
								totGralDesc=0;
								precio_desc=0;
								txtdescuento.text="0.0";
								useranulo=0;
								userentrego=0;
								usercancelo=0;
								userexpidio=0;
								txtpreciop.text="";
								mskcantidad.text="";		
								mskrecargo.text="0.0";
								mskdescuentopesos.text="0.0";
								mskanticipo.text="0.0";
								btnremover.enabled=false;
								lblTotApagar.text="0.000";
								lblTotGral.text="0.000";
								
								porc_d=0;
								anticipo=0;
								porc_desc_total=0;		
								lbldescuento.text="0.000";
								lblsaldo.text="0.000";
								lbltotalconrecargo.text="0.000";
								desc_resto=0;
								tot_recargo_porc=0;
								temp_tot_porc_desc=0;
								tempPorcDes=0;
								tempTotDesc=0;
								
								
							}else{
								
								//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
								if(newValue>0){
									
									if(grid.selectedItem.prec_descuento>0){
										var newpricexcountt:Number=grid.selectedItem.countt*Number(Number(newValue).toFixed(3));
										var descitemporc:Number=Number(Number(grid.selectedItem.porc_desc).toFixed(3))*newValue/100;
										
										
										grid.selectedItem.prec_descuento=Number(Number(newValue-descitemporc).toFixed(3));
										
										
										grid.selectedItem.subtotal=Number(Number(newValue-descitemporc)*grid.selectedItem.countt).toFixed(3);
										
									}else
										grid.selectedItem.subtotal=newValue*grid.selectedItem.countt;
									
									
									
									if(arrayDg.length==1){
										totGral=Number(newValue*grid.selectedItem.countt);
										
										
										if(Number(lbldescuento.text)!=0)
											lblTotApagar.text=Number(totGral-totGralDesc).toFixed(3);
									}else{
										temptot=temptot+(newValue*grid.selectedItem.countt);
										
										for(var i:int=0;i<arrayDg.length;i++){
											if(arrayDg[i].idproduct!=grid.selectedItem.idproduct){
												
												if(arrayDg[i].porc_desc>0){
													tempTotDesc=tempTotDesc+Number(Number(arrayDg[i].prec_descuento).toFixed(3));
													tempPorcDes=tempPorcDes+Number(Number(arrayDg[i].porc_desc).toFixed(3));
												}
												if(arrayDg[i].subtotal>0)
													temptot=temptot+(arrayDg[i].price*arrayDg[i].countt);
												
											}
											
										}
										
										
										totGral=temptot;
										
										totGralDesc=0;
										
										totGralDesc=Number(tempTotDesc.toFixed(3))+Number(Number(grid.selectedItem.prec_descuento).toFixed(3));
										
										temp_tot_porc_desc=0;
										
										temp_tot_porc_desc=Number(tempPorcDes.toFixed(3))+Number(Number(grid.selectedItem.porc_desc).toFixed(3));
										
										if(Number(lbldescuento.text)!=0)
											lblTotApagar.text=Number(totGral+Number(lbldescuento.text)).toFixed(3);
									}
									
									
									
								}else{
									if(newValue==0&&grid.selectedIndex>0&&col==4){
										grid.selectedItem.price="0.00";
										grid.selectedItem.subtotal="0.000";
										grid.selectedItem.prec_descuento="0.00";
										grid.selectedItem.porc_desc="0.00";
										var newTotalTemp:Number=0;	
										for(var l:int=0;l<arrayDg.length;l++){
											
											if(arrayDg[l].idproduct!=grid.selectedItem.idproduct){
												
												if(arrayDg[l].porc_desc>0){
													tempTotDesc=tempTotDesc+Number(arrayDg[l].prec_descuento);
													tempPorcDes=tempPorcDes+Number(arrayDg[l].porc_desc);
												}
												if(arrayDg[l].subtotal>0)
													newTotalTemp=newTotalTemp+Number(Number(arrayDg[l].price*arrayDg[l].countt).toFixed(3));
												
											}
										}
										
										totGral=newTotalTemp;
										
										totGralDesc=0;
										
										totGralDesc=Number(tempTotDesc.toFixed(3));
										
										temp_tot_porc_desc=0;
										
										temp_tot_porc_desc=Number(tempPorcDes.toFixed(3));
										
										
										
										
										
									}else{
										
										var newTotalTemp1:Number=0;	
										
										grid.selectedItem.price="0.00";
										grid.selectedItem.subtotal="0.000";
										grid.selectedItem.prec_descuento="0.00";
										grid.selectedItem.porc_desc="0.00";
										
										for(var lm:int=0;lm<arrayDg.length;lm++){
											
											if(arrayDg[lm].idproduct!=grid.selectedItem.idproduct){
												
												if(arrayDg[lm].porc_desc>0){
													tempTotDesc=tempTotDesc+Number(arrayDg[lm].prec_descuento);
													tempPorcDes=tempPorcDes+Number(arrayDg[lm].porc_desc);
												}
												if(arrayDg[lm].subtotal>0)
													newTotalTemp1=newTotalTemp1+Number(Number(arrayDg[lm].price*arrayDg[lm].countt).toFixed(3));
												
											}
										}
										
										totGral=newTotalTemp1;
										
										totGralDesc=0;
										
										totGralDesc=Number(tempTotDesc.toFixed(3));
										
										temp_tot_porc_desc=0;
										
										temp_tot_porc_desc=Number(tempPorcDes.toFixed(3));
										
										
										
										
										
									}
									
									
								}
								//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
							}
							//---------------------------------------------------------------------------------------------------------------------------------
							
						}else{
							if(col==3){
								var cannt:Number=(grid.selectedItem.countt);
								var subtot:Number=(grid.selectedItem.subtotal);
								//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
								if(col==3&&arrayDg.length==1&&newValue==0){
									
									grid.dataProvider.removeItemAt(grid.selectedIndex);
									
									totGral=0;
									totGralDesc=0;
									precio_desc=0;
									txtdescuento.text="0.0";
									useranulo=0;
									userentrego=0;
									usercancelo=0;
									userexpidio=0;
									txtpreciop.text="";
									mskcantidad.text="";	
									mskrecargo.text="0.0";
									btnremover.enabled=false;
									lblTotApagar.text="0.000";
									mskdescuentopesos.text="0.0";
									mskanticipo.text="0.0";
									lblTotGral.text="0.000";
									porc_d=0;
									porc_desc_total=0;	
									
									lbldescuento.text="0.000";
									lblsaldo.text="0.000";
									lbltotalconrecargo.text="0.000";
									desc_resto=0;
									tot_recargo_porc=0;
									temp_tot_porc_desc=0;
									tempPorcDes=0;
									tempTotDesc=0;
									
									//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
								}else{
									
									
									
									if(col==3&&newValue>0){
										var toti:Number=0;	
										if(grid.selectedItem.prec_descuento>0){
											
											
											grid.selectedItem.subtotal=newValue*Number(Number(grid.selectedItem.prec_descuento).toFixed(3));
											
											
											
											
											
										}else{
											
											grid.selectedItem.subtotal=newValue*grid.selectedItem.price;
											
											
										}
										
										toti=toti+Number(Number(grid.selectedItem.price*newValue).toFixed(3));
										
										
										
										if(arrayDg.length==1){
											totGral=Number(grid.selectedItem.price*newValue);
											if(Number(lbldescuento.text)!=0){
												
												lblTotApagar.text=Number(totGral-totGralDesc).toFixed(3);
											}
										}else{
											
											
											
											
											
											
											
											for(var n:int=0;n<arrayDg.length;n++){
												if(arrayDg[n].idproduct!=grid.selectedItem.idproduct){
													
													if(arrayDg[n].subtotal>0)
														toti=toti+Number(Number(arrayDg[n].price*arrayDg[n].countt).toFixed(3));
													
													if(arrayDg[n].porc_desc>0&&arrayDg[n].subtotal>0){
														tempTotDesc=tempTotDesc+Number(arrayDg[n].prec_descuento);
														tempPorcDes=tempPorcDes+Number(arrayDg[n].porc_desc);
														
													}
													
													
												}
											}
											
											
											totGralDesc=0;
											temp_tot_porc_desc=0;
											
											if(grid.selectedItem.prec_descuento>0){
												totGralDesc=Number(tempTotDesc.toFixed(3))+Number(Number(grid.selectedItem.prec_descuento).toFixed(3));
												temp_tot_porc_desc=Number(tempPorcDes.toFixed(3))+Number(Number(grid.selectedItem.porc_desc).toFixed(3));
											}else{
												totGralDesc=Number(tempTotDesc.toFixed(3));
												temp_tot_porc_desc=Number(tempPorcDes.toFixed(3));
											}
											
											
											
											
											
											
											
											totGral=toti;
											
											
											
											
										}
										
										
										
										
										
										
									}else{
										var tottemp:Number=0;
										if(col==3&&newValue==0&&grid.selectedIndex>0){
											
											grid.selectedItem.countt="0";
											grid.selectedItem.subtotal="0.000";
											grid.selectedItem.porc_desc="0.0";
											grid.selectedItem.prec_descuento="0.0";
											
											
											for(var m:int=0;m<arrayDg.length;m++){
												if(arrayDg[m].idproduct!=grid.selectedItem.idproduct){
													
													if(arrayDg[m].porc_desc>0){
														tempTotDesc=tempTotDesc+Number(arrayDg[m].prec_descuento);
														tempPorcDes=tempPorcDes+Number(arrayDg[m].porc_desc);
													}
													if(arrayDg[m].subtotal>0)
														tottemp=tottemp+Number(Number(arrayDg[m].price*arrayDg[m].countt).toFixed(3));
												}
											}
											
											totGral=0;
											
											totGral=tottemp;
											
											totGralDesc=0;
											
											totGralDesc=Number(tempTotDesc.toFixed(3));
											
											temp_tot_porc_desc=0;
											
											temp_tot_porc_desc=Number(tempPorcDes.toFixed(3));
											
											
											
											
										}else{
											if(col==3&&newValue==0&&grid.selectedIndex==0)
												
												grid.selectedItem.countt="0";
												grid.selectedItem.subtotal="0.00";
												grid.selectedItem.porc_desc="0.0";
												grid.selectedItem.prec_descuento="0.0";
												
											
											
											for(var r:int=0;r<arrayDg.length;r++){
												if(arrayDg[r].idproduct!=grid.selectedItem.idproduct){
													
													if(arrayDg[r].porc_desc>0){
														tempTotDesc=tempTotDesc+Number(arrayDg[r].prec_descuento);
														tempPorcDes=tempPorcDes+Number(arrayDg[r].porc_desc);
													}
													if(arrayDg[r].subtotal>0)
														tottemp=tottemp+Number(Number(arrayDg[r].price*arrayDg[r].countt).toFixed(3));
												}
											}
											
											totGral=tottemp;
											
											totGralDesc=0;
											
											totGralDesc=Number(tempTotDesc.toFixed(3));
											
											temp_tot_porc_desc=0;
											
											temp_tot_porc_desc=Number(tempPorcDes.toFixed(3));
											
											
										}
										
										
										
										
									}
								}
								
							}else{
								if(desc_resto>0){
									grid.selectedItem.porc_desc="0.0";
									return;
								}
								//-----------------------------------------------------------------------------------------------------------------------------
								if(col==5&&oldValue==0){
									//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
									
									if(txtdescuento.text.length>0)
										txtdescuento.text="0.0";
									//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
									
									
									precio=Number(Number(grid.selectedItem.price));
									porcentajedescuento=newValue;
									
									
									
									grid.selectedItem.prec_descuento=Number(precio-Number(Number(grid.selectedItem.price*(porcentajedescuento/100)))).toFixed(3);
									
									grid.selectedItem.subtotal=grid.selectedItem.prec_descuento*grid.selectedItem.countt;
									
									precio_descontado_result_porcentaje=Number(Number(grid.selectedItem.subtotal*(porcentajedescuento/100)));
									
									
									
									
									
									
									//-------------------------------------------------------------------------------------
									
									
									
									if(arrayDg.length==1){
										totGralDesc=Number(grid.selectedItem.prec_descuento);
										
										
										
									}else{
										
										
										for(var p:int=0;p<arrayDg.length;p++){
											
											if(arrayDg[p].idproduct!=grid.selectedItem.idproduct){
												
												
												tempTotDesc=tempTotDesc+Number(arrayDg[p].prec_descuento);
												tempPorcDes=tempPorcDes+Number(arrayDg[p].porc_desc);
												
												
												
											}
										}
										
										
										totGralDesc=0;
										
										
										totGralDesc+=Number(tempTotDesc.toFixed(3))+Number(Number(grid.selectedItem.prec_descuento).toFixed(3));
										
										
										temp_tot_porc_desc=0;
										
										temp_tot_porc_desc=Number(tempPorcDes.toFixed(3))+Number(Number(newValue).toFixed(3));
										
										
										
										
										
										
										
									}
									
									
									
									
									
									
									
								}else{
									if(desc_resto>0){	
										grid.selectedItem.porc_desc="0.0";
										return;
									}
									if(col==5&&newValue==0){
										
										grid.selectedItem.subtotal=grid.selectedItem.price*grid.selectedItem.countt;
										grid.selectedItem.prec_descuento="0.000";
										
										
										if(arrayDg.length==1){
											totGralDesc=Number(grid.selectedItem.prec_descuento);
											
											
											
										}else{
											
											for(var j:int=0;j<arrayDg.length;j++){
												
												if(arrayDg[j].idproduct!=grid.selectedItem.idproduct){
													tempTotDesc=tempTotDesc+Number(arrayDg[j].prec_descuento);
													tempPorcDes=tempPorcDes+Number(arrayDg[j].porc_desc);
												}
												
												
											}
											
											
											
											
											
											totGralDesc=Number(tempTotDesc.toFixed(3));
											
											temp_tot_porc_desc=0;
											
											temp_tot_porc_desc=Number(tempPorcDes.toFixed(3))+Number(Number(newValue).toFixed(3));
											
											
											
											
											
										}
										
										
									}else{
										if(desc_resto>0){	
											grid.selectedItem.porc_desc="0.0";
											return;
										}
										if(col==5&&newValue>0){
											
											porcentajedescuento=newValue;
											
											tempPrecDesc=grid.selectedItem.prec_descuento;
											
											precio=Number(Number(grid.selectedItem.price));
											
											grid.selectedItem.prec_descuento=Number(precio-Number(Number(grid.selectedItem.price*(porcentajedescuento/100)))).toFixed(3);
											
											
											grid.selectedItem.subtotal=grid.selectedItem.prec_descuento*grid.selectedItem.countt;
											
											precio_descontado_result_porcentaje=Number(Number(grid.selectedItem.subtotal*(porcentajedescuento/100)));
											
											
											
											if(arrayDg.length==1){
												totGralDesc=Number(grid.selectedItem.prec_descuento);
												
												
												
											}else{
												
												
												for(var k:int=0;k<arrayDg.length;k++){
													
													if(arrayDg[k].idproduct!=grid.selectedItem.idproduct){
														tempTotDesc=tempTotDesc+Number(arrayDg[k].prec_descuento);
														tempPorcDes=tempPorcDes+Number(arrayDg[k].porc_desc);
													}
													
												}
												
												
												
												
												
												totGralDesc+=Number(tempTotDesc.toFixed(3))+Number(Number(grid.selectedItem.prec_descuento).toFixed(3));
												
												
												
												temp_tot_porc_desc+=Number(tempPorcDes.toFixed(3))+Number(Number(newValue).toFixed(3));
												
												
												
												
												
												
											}
										}
									}
									
									
									
									
									
									
									
									
								}
								//---------------------------------------------------------------------------------------------------------------------------------
								
								
								
							}
							
							
						}
						
						
						
						
					}else
						return;
					
					
					
					
					
				}
				arrayDg.refresh();
				
				//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				/*if(int(txtdescuento.text)==0||txtdescuento.text.length==0){
					lblTotGral.text=totGral.toFixed(3);
					lbldescuento.text=Number(Number(-totGralDesc)).toFixed(3);
					
				}*/
				
				
				var calcrecargo:Number=0;
				
				
				if(tot_recargo_porc>0){
					calcrecargo=Number(totGral-totGralDesc)*tot_recargo_porc/100;
					lbltotalconrecargo.text=Number(Number(Number(totGral.toFixed(3))-Number(totGralDesc.toFixed(3)))+Number(calcrecargo.toFixed(3))).toFixed(3);
					
					lblTotApagar.text=Number(Number(Number(totGral.toFixed(3))-Number(totGralDesc.toFixed(3)))+Number(calcrecargo.toFixed(3))).toFixed(3);
					lblsaldo.text=Number(Number(totGral-totGralDesc+calcrecargo)-anticipo).toFixed(3);
				}else{
					lblTotApagar.text=Number(Number(totGral.toFixed(3))-Number(totGralDesc.toFixed(3))).toFixed(3);
					lblsaldo.text=Number(Number(totGral-totGralDesc)).toFixed(3);
				}
				
					
					
					notas[adgNotas.selectedIndex].saldo=lblsaldo.text;
					notas[adgNotas.selectedIndex].montototalapagar=lblTotApagar.text;
					notas[adgNotas.selectedIndex].total=lblTotGral.text;
					notas[adgNotas.selectedIndex].recargototal=lbltotalconrecargo.text;
					notas[adgNotas.selectedIndex].descuentonota=lbldescuento.text;
				
				
					
}//end function edit grid
			
			private function calculeanticipo():void{
				
					
				
					var calcularsaldo:Number=(Number(Number(lblTotApagar.text).toFixed(3))-Number(mskanticipo.text))-anticipo;
							if(calcularsaldo<0){
								Alert.show("El calculo del saldo da un número negativo \nverifique o vuelva a calcular");
								return;
							}else{
									
								anticipo=anticipo+Number(Number(mskanticipo.text).toFixed(3));
								lblsaldo.text=calcularsaldo.toFixed(3);// calculo del saldo
								notas[adgNotas.selectedIndex].saldo=lblsaldo.text;//celda en el grid cabecera del saldo
							}
				
				
			
			
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			public function anticipocalculoreuso():void{
				
				if(anticipo==0){
					calculeanticipo();
					return;
				
				}else{
							
								calculeanticipo();
								
							
					
					}
				
				
				
					
			}
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			public function calcularAnticipo(evt:CloseEvent):void{
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				
				if(int(mskanticipo.text)==0||mskanticipo.text.length==0){
					
					
					
					anticipo=0;
					for (var j:int=0;j<listhistoricoselected.length;j++){
						//recorro la coleccion historico para mostrar los anticipo de la nota
						if(Number(listhistoricoselected[j].anticipo)>0){
							
						
						
							anticipo=anticipo+Number(Number(listhistoricoselected[j].anticipo).toFixed(3));
						
							
							
							
						}
					}
					lblsaldo.text=Number(Number(Number(lblTotApagar.text).toFixed(3))-Number(lbldescuento.text)-(anticipo)).toFixed(3);
					
				}else {
					if(int(mskanticipo.text)>int(lblTotApagar.text))
					{
						Alert.show("IMPOSIBLE HACER EL CALCULO DE SALDO");
						return;
					}else{
						anticipocalculoreuso();
					
					}
					
					
				}
				
				
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			public function calcularRecargoVariant():void{
				var recargo:Number=0;
				var totgral:Number=Number(Number(lblTotGral.text).toFixed(3));
				var descTotal:Number=Math.abs(Number(lbldescuento.text));
				
				if(Number(mskrecargo.text)==0||mskrecargo.text.length==0){
					
					tot_recargo_porc=0;
					lbltotalconrecargo.text="0.000";
					lblTotApagar.text=Number(totgral-descTotal).toFixed(3);
					totRecargo=0;
					
					if(anticipo>0)
						lblsaldo.text=Number((totgral-descTotal)-anticipo).toFixed(3);
					
				}else{
					
												
								tot_recargo_porc=tot_recargo_porc+Number(mskrecargo.text);
					
					var calcularTotalAPagar:Number=totgral-descTotal;
					
					recargo=tot_recargo_porc*Number(calcularTotalAPagar.toFixed(3))/100;
					lbltotalconrecargo.text=Number(Number(calcularTotalAPagar.toFixed(3))+recargo).toFixed(3);
					
					var lbltotrecargo:Number=Number(Number(lbltotalconrecargo.text).toFixed(3));					
					var lbltotdesc:Number=Math.abs(Number(lbldescuento.text));
					
					lblTotApagar.text=Number(lbltotrecargo).toFixed(3);
					
					mskrecargo.text=tot_recargo_porc.toFixed(2);
					totRecargo=recargo;
					
					notas[adgNotas.selectedIndex].recargototal=totRecargo.toFixed(3);
					
					if(anticipo>0)
						lblsaldo.text=Number(lbltotrecargo-anticipo).toFixed(3);
					else
						lblsaldo.text=Number(lbltotrecargo).toFixed(3);
					
					
				}
				
				
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			private function calcularRecargo(evt:CloseEvent):void{
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				
				calcularRecargoVariant();
				
				notas[adgNotas.selectedIndex].montototalapagar=lblTotApagar.text;
				notas[adgNotas.selectedIndex].total=lblTotGral.text;
				notas[adgNotas.selectedIndex].saldo=lblsaldo.text;
				notas[adgNotas.selectedIndex].descuentonota=lbldescuento.text;
				
				notas[adgNotas.selectedIndex].recargototal=lbltotalconrecargo.text;
			
				
				
			}
			//---------------------------------------------------------------------------------
			//}
			//----------------------------------------------------------------------------------------------------------

			protected function operation2_faultHandlerSelectAllEmpleados(event:FaultEvent):void
			{
				Alert.show("   ERROR AL OBTENER LISTADO DE EMPLEADOS   ");
				
			}
			
			protected function operation2_resultHandlerSelectAllEmpleados(event:ResultEvent):void
			{
				
				xmlListEmpleados = new XMLList(event.result);
				cmbVendedores.dataProvider=empleadoslist;
				
			}
			
			protected function group1_initializeHandler(event:FlexEvent):void
			{
				wsnotas.getRecorCountNotas();
				productosWs.searchAllProductos();
				wsempleados.selectAllEmpleados();
				wstarjetascreditodebito.searchAllTarjetasCreditoDebito();
				cmbproduct.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtpassword.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskisearchidnota.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtpreciop.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				cmbVendedores.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				txtdescuento.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskcantidad.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskdescuentopesos.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskrecargo.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				mskanticipo.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				btnactualizar.addEventListener(KeyboardEvent.KEY_UP,transferirFocus);
				adglistpedprod.addEventListener(AdvancedDataGridEvent.ITEM_EDIT_END,itemEditEndHandler);
				adgNotas.selectedIndex=0;
				totGral=0;
				totGralDesc=0;
				precio_desc=0;
				porc_d=0;
				porc_desc_total=0;
				useranulo=0;
				userentrego=0;
				usercancelo=0;
				userexpidio=0;
				nrodocucli=0;
			}
			protected function btnremover_clickHandler(event:MouseEvent):void
			{
				if(arrayDg.length>0&&adgNotas.selectedIndex>-1)
					Alert.show("   Esta seguro de remover los productos Listados?","Confirmar Eliminación   ", Alert.YES | Alert.NO, this, removerListadoPedidos, null, Alert.NO);
				else
					Alert.show("Debe seleccionar una fila del listado \nhaciendo click o doble click!!!");
				
			}
			private function transferirFocus(KeyPress:KeyboardEvent):void{
				
				var b:Boolean=false;
				if(KeyPress.keyCode==Keyboard.ENTER){
					if(cmbproduct.text!=""&&KeyPress.currentTarget.toString().indexOf("cmbproduct")!=-1){
						focusManager.setFocus(txtpreciop);
						txtpreciop.text=cmbproduct.selectedItem.precio;
						
					}
					if(KeyPress.currentTarget.toString().indexOf("mskcantidad")!=-1&&Number(mskcantidad.text)>0){
						for (var i:int=0;i<arrayDg.length && !b;i++){
							
							if((String(arrayDg[i].name).toUpperCase()==String(cmbproduct.text).toUpperCase()) && Number(arrayDg[i].price) != Number(txtpreciop.text)){
								Alert.show("Imposible Cargar, este Producto se encuentra cargado con un Precio diferente, corrija!!!");
								b=true;
								
							}
							
						}
						if(b.valueOf()){
							
							return;
						}else{		
							if(notas.length>0&&adgNotas.selectedIndex>-1)
								addadglistpedprod(cmbproduct.selectedItem.idproduct,adgNotas.selectedItem.id,cmbproduct.selectedItem.id,txtpreciop.text,mskcantidad.text,cmbproduct.selectedItem.descripcion,txtdescuento.text);
							else
								Alert.show("Imposible procesar, para agregar un Producto, \nantes deberá seleccionar una Nota de Pedido!!!");
						}
					}
					if(KeyPress.currentTarget.toString().indexOf("txtpreciop")!=-1&& int(txtpreciop.text)>0)
						focusManager.setFocus(mskcantidad);
					
					if(KeyPress.currentTarget.toString().indexOf("txtdescuento")!=-1 && Number(Number(txtdescuento.text).toFixed(3))>0&&arrayDg.length>0)
						Alert.show("   Desea Agregar el Descuento "+txtdescuento.text+" al Listado de Productos?","Confirmar Operación   ", Alert.YES | Alert.NO, this, calcularDescuentoTotal, null, Alert.NO);
						
						

					if(KeyPress.currentTarget.toString().indexOf("mskrecargo")!=-1)
						Alert.show("   Desea Agregar el Recargo % "+mskrecargo.text+" \nal porcentaje existente % "+tot_recargo_porc+" ?","Confirmar Operación   ", Alert.YES | Alert.NO, this, calcularRecargo, null, Alert.NO);
					
					if(KeyPress.currentTarget.toString().indexOf("mskanticipo")!=-1)
						Alert.show("   Desea Agregar el Anticipo $ "+mskanticipo.text+" \nal anticipo existente $ "+anticipo+" ?","Confirmar Operación   ", Alert.YES | Alert.NO, this, calcularAnticipo, null, Alert.NO);
						
					
								if(KeyPress.target.toString().indexOf("mskisearchidnota")!=-1){
									
									
									indexPage=0;
									
									totalReg=0;
									
									last_btn.enabled=false;
									next_btn.enabled=false;
									first_btn.enabled=false;
									prev_btn.enabled=false;
									
									//metodo de webservices que busca una nota de pedido en la base de datos
									wsnotas.selectUnaNota(int(mskisearchidnota.text));
									
								}
					
					if(KeyPress.currentTarget.toString().indexOf("cmbVendedores")!=-1&&cmbVendedores.selectedItemId>=0)
						txtpassword.setFocus();
					
					if(KeyPress.currentTarget.toString().indexOf("txtpassword")!=-1&&txtpassword.text.length>0)
						btnactualizar.setFocus();
					
					if(KeyPress.currentTarget.toString().indexOf("mskdescuentopesos")!=-1)
						Alert.show("   Desea Agregar el Descuento en $ "+mskdescuentopesos.text+" \nal descuento existente $ "+totGralDesc+" ?","Confirmar Operación   ", Alert.YES | Alert.NO, this, calculardescuentopesos, null, Alert.NO);
						
					
					
				}
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			private function calculardescuentopesos(evt:CloseEvent):void{
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				var b:Boolean=false;
				if(Number(Number(mskdescuentopesos.text).toFixed(3))>=0){
					for(var i:int=0;i<arrayDg.length && !b;i++){
						if(Number(arrayDg[i].porc_desc) > 0){
							b=true;
							
							Alert.show("No se puede calcular el descuento por que hay productos con descuentos en el listado!!!");
							txtdescuento.text="0.0";
							
							
						}
						
						
					}
					
					if(b)
						return;
					
					if(Number(porc_desc_total.toFixed(3))>0){
						Alert.show("YA HAY CALCULOS CON PORCENTAJES DE DESCUENTO, CORRIJA!!!");
						return;
					}else{
						if(Number(lblTotApagar.text)<Number(mskdescuentopesos.text)){
							Alert.show("EL CALCULO NO SE PUEDE REALIZAR, VERIFIQUE!!!");
							return;
						}else{
							
							
							
							

							
							
							
							desc_resto=0;
							totGralDesc=totGralDesc+Number(mskdescuentopesos.text);
							
							
							
							
							
							
							
									if(tot_recargo_porc>0){
										var calcTotalaPagar:Number=Number(totGral-totGralDesc);
										var recargoCalculo:Number=(calcTotalaPagar*tot_recargo_porc)/100;
										lbltotalconrecargo.text=Number(calcTotalaPagar+recargoCalculo).toFixed(3);
										lblTotApagar.text=Number(calcTotalaPagar+recargoCalculo).toFixed(3);
										lblsaldo.text=Number(Number(calcTotalaPagar+recargoCalculo)-anticipo).toFixed(3);	
									}else{
										desc_resto=Number(Number(lblTotGral.text)-totGralDesc);
											
										lblTotApagar.text=desc_resto.toFixed(3);
										
										lblsaldo.text=Number(desc_resto-anticipo).toFixed(3);
									}
									
									
							
							lbldescuento.text=Number(-totGralDesc).toFixed(3);
							
							notas[adgNotas.selectedIndex].montototalapagar=lblTotApagar.text;
							notas[adgNotas.selectedIndex].saldo=lblsaldo.text;
							notas[adgNotas.selectedIndex].descuentonota=lbldescuento.text;
							notas[adgNotas.selectedIndex].recargototal=lbltotalconrecargo.text;
							
						}
						
					}
					
					
					
					
					
				}
				
				
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			//****************************************************************************************************
			protected function getDatosXML():String{
				var entregado:int=0;
				var canceladanota:int=0;
				var stockfuturo:int=0;
				var anulada:int=0;
				var enfectivo:int=0;
				var porcdescAcum:Number=0;
				
				
				
				if(txtdescuento.text.length==0)
					txtdescuento.text="0.0";
				
				if(mskrecargo.text.length==0)
					mskrecargo.text="0.0";
				
				if(mskanticipo.text.length==0)
					mskanticipo.text="0.0";
				
				if(mskdescuentopesos.text.length==0)
					mskdescuentopesos.text="0.0";
				
				var pendiente:int=1;
				if(rdbentregadosi.selected){
					entregado=1;
					pendiente=0;
				}
				
				if(rdbcanceladanotasi.selected)
					canceladanota=1;
				
				
				
				
				
				
				if(rdanuladasi.selected)
					anulada=1;
				
				/*recorro historico para recalcular efectivamente el anticipo
				asi de esa manera nos aseguramos que no hayan problemas con los datos*/
				
				anticipo=0;
				for (var j:int=0;j<listhistoricoselected.length;j++){
					//recorro la coleccion historico para mostrar los anticipo de la nota
					if(Number(listhistoricoselected[j].anticipo)>0){
						
						
						
						anticipo=anticipo+Number(Number(listhistoricoselected[j].anticipo).toFixed(3));
						
						
						
						
					}
					
					
				}
				anticipo=anticipo+Number(Number(mskanticipo.text).toFixed(3));
				
				
				
				
				
				
				
				var xmlnota:String="<notapedido>\n" +
					"<idnota>"+adgNotas.selectedItem.id+"</idnota>\n" +
					"<vendedor>" +cmbVendedores.selectedItem.id+"</vendedor>\n"+
					"<personas>\n" +
						"<id>"+idcliente+"</id>\n" +
						"<numerodocu>"+nrodocucli+"</numerodocu>\n" +
					"</personas>\n" +
					"<tarjetacredito>\n" +
						"<id_tarjeta>"+cmbTarjetasCreditoDebito.selectedItem.id+"</id_tarjeta>\n" +
					"</tarjetacredito>\n" +
					"<porcentaje>\n" +
						"<id_porcentaje>1</id_porcentaje>\n" +
					"</porcentaje>\n" +
					"<montototal>"+lblTotGral.text+"</montototal>\n" +
					"<anticipo>"+mskanticipo.text+"</anticipo>\n" +
					"<anticipoacum>"+anticipo.toFixed(3)+"</anticipoacum>\n" +
					
					"<saldo>"+lblsaldo.text+"</saldo>\n" ;
				if(entregado==1){
					xmlnota+="<entregado>"+entregado+"</entregado>\n" +
						"<usuario_entregado>"+userentrego+"</usuario_entregado>\n" ;
				}else{
					xmlnota+="<entregado>"+entregado+"</entregado>\n" +
						"<usuario_entregado>0</usuario_entregado>\n" ;
				}
				
				xmlnota+="<usuario_expidio_nota>"+userexpidio+"</usuario_expidio_nota>\n" +
					"<stockfuturo>"+stockfuturo+"</stockfuturo>\n" ;
				
				if(anulada==1){
					xmlnota+="<anulado>"+anulada+"</anulado>\n" +
						"<id_usuario_anulado>"+useranulo+"</id_usuario_anulado>\n" ;
				}else{
					xmlnota+="<anulado>"+anulada+"</anulado>\n" +
						"<id_usuario_anulado>0</id_usuario_anulado>\n" ;
					
				}
				if(canceladanota==1){
					xmlnota+="<cancelado>"+canceladanota+"</cancelado>\n" +
						"<usuario_cancelo_nota>"+usercancelo+"</usuario_cancelo_nota>\n" ;
				}else{
					xmlnota+="<cancelado>"+canceladanota+"</cancelado>\n" +
						"<usuario_cancelo_nota>0</usuario_cancelo_nota>\n" ;
				}
				
				xmlnota+="<descuentonota>"+lbldescuento.text+"</descuentonota>\n" ;
				
				if(Number(Number(mskdescuentopesos.text).toFixed(3))>0)
					xmlnota+="<descuentopesos>" +Number(mskdescuentopesos.text).toFixed(3)+"</descuentopesos>\n";
				else
					xmlnota+="<descuentopesos>0</descuentopesos>\n";
				
					xmlnota+="<porcentajerecargo>"+tot_recargo_porc+"</porcentajerecargo>\n" +
					"<montototalapagar>"+lblTotApagar.text+"</montototalapagar>\n"+
					"<observaciones>" +this.txtobservaciones.text+"</observaciones>\n" +
					"<pendiente>"+pendiente+"</pendiente>\n"+
					"<montoiva>0</montoiva>\n"+
					"<recargo>"+lbltotalconrecargo.text+"</recargo>\n" +
					"<fechacompra>"+notas[adgNotas.selectedIndex].fechacompra+"</fechacompra>\n"+					
					"<fechaentrega>"+notas[adgNotas.selectedIndex].fechaentrega+"</fechaentrega>\n"+
					"<fecancel>"+notas[adgNotas.selectedIndex].fecancel+"</fecancel>\n"+					
					"<horacompra>"+notas[adgNotas.selectedIndex].horacompra+"</horacompra>" +
					"<fechaanulada>"+notas[adgNotas.selectedIndex].fechaanulado+"</fechaanulada>\n"+
					"<numerodecupon>"+txtnumerocuponpago.text+"</numerodecupon>\n" +
					"<enefectivo>"+enfectivo+"</enefectivo>\n"+
					"<detallesnotapedido>\n" ;
				
							for(var ii:int=0;ii<arrayDg.length;){
								
								if(arrayDg[ii].price==0||arrayDg[ii].countt==0||arrayDg[ii].subtotal==0)
									ii++;
									else{
											porcdescAcum+=Number(Number(arrayDg[ii].porc_desc).toFixed(2));
											xmlnota+="<itemdetallesnota>\n" +
												"<cantidad>"+arrayDg[ii].countt+"</cantidad>\n" +
													"<preciocondescuento>"+arrayDg[ii].prec_descuento+"</preciocondescuento>\n" +
													"<precio>"+arrayDg[ii].price+"</precio>\n" +
													"<subtotal>"+Number(arrayDg[ii].subtotal).toFixed(3)+"</subtotal>\n" +									
													"<entregado>"+entregado+"</entregado>\n" +
													"<cancelado>"+canceladanota+"</cancelado>\n" +
													"<anulado>"+anulada+"</anulado>\n" +
													"<pendiente>"+pendiente+"</pendiente>\n" ;
											if(desc_resto>0&&Number(arrayDg[ii].porc_desc)>0)
													xmlnota+="<descuento>0.00</descuento>\n" ;
											else
													xmlnota+="<descuento>"+Number(arrayDg[ii].porc_desc).toFixed(2)+"</descuento>\n" ;
													xmlnota+="<iva>0</iva>\n" +
													"<id_nota>"+arrayDg[ii].idnota+"</id_nota>\n" +
													"<id_producto>"+arrayDg[ii].id+"</id_producto>\n" +
													"</itemdetallesnota>\n" ;
												ii++
										}								
							}
				
				
				
				xmlnota+= "</detallesnotapedido>\n" ;
					if(porcdescAcum>0)
						xmlnota+="<porc_descuento_total>"+Number(porcdescAcum).toFixed(2)+"</porc_descuento_total>\n" ;
					else
						xmlnota+="<porc_descuento_total>"+Number(txtdescuento.text).toFixed(2)+"</porc_descuento_total>\n" ;
					
				
				return xmlnota+="</notapedido>\n";
				
				
			}	
			//****************************************************************************************************
			private function addadglistpedprod(idprod:String,codigoId:String,idnota:String,txtprecio:String,cantidad:String,descripcion:String,desc_porc:String):void{
				
				var subtot:Number;
				var b:Boolean=false;
				var p_desc:Number=0;
				
				arrayDg.refresh();
				subtot=Number(Number(Number(Number(txtprecio).toFixed(3))*Number(cantidad)).toFixed(3));
				totGral=Number(Number(totGral.toFixed(3))+Number(subtot.toFixed(3)));
				
				
				
				
				if(dp.length==0){
					dp=[{idproduct:idprod,id:idnota,name:descripcion,countt:cantidad,price:txtprecio,porc_desc:"0.000",prec_descuento:p_desc,subtotal:subtot,idnota:codigoId}];
					totGralDesc=totGralDesc+Number(Number(desc_porc).toFixed(3));
				}else{
					
					for(var i:int=0;i<dp.length && !b;i++){	
						
						//------------------------------------------------------------------					
						if(dp[i].name==descripcion){
							
							dp[i].countt=int(dp[i].countt)+int(cantidad);					
							dp[i].subtotal=dp[i].subtotal+subtot-p_desc;
							
							
							b=true;
							
						}
						//------------------------------------------------------------------
					}
					if(!b)					
						dp.push({idproduct:idprod,id:idnota,name:descripcion,countt:cantidad,price:txtprecio,porc_desc:"0.000",prec_descuento:p_desc,subtotal:subtot,idnota:codigoId});
					
				}
				
				//-------------------------------------------------------------------------		
				arrayDg.source=dp;
				arrayDg.refresh();
				//-------------------------------------------------------------------------
				btnremover.enabled=true;
				
				adglistpedprod.dataProvider=arrayDg;
				lblTotGral.text=totGral.toFixed(3);
				lbldescuento.text=Number(-totGralDesc).toFixed(3);
				
				if(int(mskrecargo.text)>0){
					
					var calcularTotalAPagar:Number=totGral-totGralDesc;
					
					var recargo:Number=tot_recargo_porc*Number(calcularTotalAPagar.toFixed(3))/100;
					lbltotalconrecargo.text=Number(Number(calcularTotalAPagar.toFixed(3))+recargo).toFixed(3);
					lblTotApagar.text=Number(Number(calcularTotalAPagar.toFixed(3))+recargo).toFixed(3);
					lblsaldo.text=Number(Number(Number(totGral)-Number(totGralDesc))+recargo-anticipo).toFixed(3);
					
				}else{
					lblTotApagar.text=Number(Number(totGral)-Number(totGralDesc)).toFixed(3);
					lblsaldo.text=Number(Number(totGral)-Number(totGralDesc)-anticipo).toFixed(3);
					
				}
				
		
				
					
				
				
				
				mskcantidad.text="";
				txtpreciop.text="";
				
				
					notas[adgNotas.selectedIndex].montototalapagar=lblTotApagar.text;
					notas[adgNotas.selectedIndex].total=lblTotGral.text;
					notas[adgNotas.selectedIndex].saldo=lblsaldo.text;
					notas[adgNotas.selectedIndex].descuentonota=lbldescuento.text;
						
					notas[adgNotas.selectedIndex].recargototal=lbltotalconrecargo.text;
				
				cmbproduct.setFocus();
				
			}
			//--------------------------------------------------------------------------------------
			//---------------------------------------------------------------------------------
			private function calcularDescuentoTotal(evt:CloseEvent):void{
				
				var b:Boolean=false;
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				
				
				for(var i:int=0;i<arrayDg.length && !b;i++){
					if(Number(arrayDg[i].porc_desc) > 0){
						b=true;
						
						Alert.show("No se puede calcular el descuento por que hay productos con descuentos en el listado!!!");
						txtdescuento.text="0.0";
						
						
					}
					
					
				}
				
				if(b)
					return;
				
				if(desc_resto==0)			
					calcularDescuentoVariant();
				else{
					Alert.show("YA HAY CALCULADO UN DESCUENTO EN\n PESOS, IMPOSIBLE REALIZAR LA OPERACIÓN!!!");
					return;
				}
				
				
				
				
					
				
				notas[adgNotas.selectedIndex].montototalapagar=lblTotApagar.text;
				notas[adgNotas.selectedIndex].total=lblTotGral.text;
				notas[adgNotas.selectedIndex].saldo=lblsaldo.text;
				notas[adgNotas.selectedIndex].descuentonota=lbldescuento.text;
				notas[adgNotas.selectedIndex].recargototal=lbltotalconrecargo.text;
				
			}
			
			protected function calcularDescuentoVariant():void{
				var tot_desc:Number=0;
				var por_des_tot:Number=0;
				
				if(int(totGralDesc)>0){
					
					por_des_tot=Number(Number(txtdescuento.text).toFixed(2));
					porc_desc_total=Number(por_des_tot.toFixed(2));							
					tot_desc= Number(Number(lblTotGral.text).toFixed(3))*por_des_tot/100;						
					lbldescuento.text=Number(Number(-tot_desc)).toFixed(3);
					totGralDesc=Number(lbldescuento.text);
					
				}else
					lbldescuento.text="0.000";
				
				
				var calcrecargo:Number=Number(totGral-totGralDesc)*tot_recargo_porc/100;
				
				if(Number(tot_recargo_porc.toFixed(3))>Number("0.0")){
					
					lbltotalconrecargo.text=Number(Number(totGral)-totGralDesc+(calcrecargo)).toFixed(3);
					lblTotApagar.text=Number(Number(totGral)-totGralDesc+(calcrecargo)).toFixed(3);
					lblsaldo.text=Number(Number(Number(totGral)-totGralDesc+(calcrecargo))-anticipo).toFixed(3);
					
				}else{
					lblTotApagar.text=Number(Number(totGral)-tot_desc).toFixed(3);
					lblsaldo.text=Number(Number(Number(totGral)-totGralDesc)-anticipo).toFixed(3);
				}
				
				
			}
			
			
			//-------------------------------------------------------------------------------------
			
			//---------------------------------------------------------------------------------
			//--------------------------------------------------------------------------------------
			public function removerListadoPedidos(cls:CloseEvent):void{
				
				
				if ((cls.detail == Alert.NO) || (cls.detail == Alert.CANCEL)) return;
				//----------------------------------------------------------
				adglistpedprod.dataProvider.removeItems();
				arrayDg.removeAll();
				arrayDg.refresh();
				adgNotas.dataProvider=notas;	
				
				
				//----------------------------------------------------------
				totGral=0;
				totGralDesc=0;
				precio_desc=0;
				txtdescuento.text="0.0";
				cmbproduct.text="";
				cmbproduct.setFocus();
				txtpreciop.text="";
				mskcantidad.text="";
				mskrecargo.text="0.0";
				mskanticipo.text="0";
				mskdescuentopesos.text="0.0";
				mskanticipo.text="0.0";
				btnremover.enabled=false;
				lblTotApagar.text="0.000";
				lblTotGral.text="0.000";
				porc_d=0;
				porc_desc_total=0;
				lbldescuento.text="0.000";
				lbltotalconrecargo.text="0.000";
				lblsaldo.text="0.000";
				desc_resto=0;
				tot_recargo_porc=0;
				anticipo=0;
				useranulo=0;
				
				userentrego=0;
				usercancelo=0;
				userexpidio=0;
				nrodocucli=0;
				
				
				
				//--------------------------------------------------------
				
				
				
			}
			protected function brncargarunproducto_clickHandler(event:MouseEvent):void
			{
				var indice:Number=0;
				var popup:datosProducto=datosProducto(PopUpManager.createPopUp(this,datosProducto,true));
				
				popup.product=productlist;
				
				
				
				
				PopUpManager.centerPopUp(popup);
			}
			protected function operation1_faultGetRecord(event:FaultEvent):void
			{
				Alert.show("Error al Conectar al Servidor!!!");
				
			}
			protected function operation1_resulGetRecord(event:ResultEvent):void
			{
				
				if(String(event.result.toString())=="LA CONSULTA NO ARROJÓ RESULTADOS")
					Alert.show("LA CONSULTA NO ARROJÓ RESULTADOS");
				else{
					if(String(event.result.toString())=="NADA"){
						Alert.show("   FALLÓ LA CONEXION CON LA BASE DE DATOS, REVISE LOS SERVICIOS SI SE HAN INICIADO CORRECTAMENTE.   ");
					}else{
						xmlproduct=new XMLList(event.result);							
						cmbproduct.dataProvider=productlist;						
					}
				}
				
				
				
				
			}
			//--------------------------------------------------------------------------
			protected function adglistpedprod_itemDoubleClickHandler(event:mx.events.ListEvent):void
			{
				// TODO Auto-generated method stub
				
				Alert.show("   Está seguro de eliminar el Registro actual?","Confirmar Eliminación   ", Alert.YES | Alert.NO, this, delRowHandler, null, Alert.NO);
				
				
			}
			//--------------------------------------------------------------------------------------
			protected function delRowHandler(evt:CloseEvent):void{
				var desc_parcial:Number=0;
				var recargo:Number=0;
				var tempTotDesc:Number=0;
				var tempPorcDes:Number=0;
			
				//----------------------------------------------------------------------------------
				
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;			
				
				
				
				
				
				
				
				
				
				//---------------------------------------------------------------------------------	
				
				
				
				
				
				
				//---------------------------------------------------------------------------------Controlo los descuentos y totales gral
				
				var totgrilla:Number=0;
				for(var k:int=0;k<arrayDg.length;k++){
					
					if(arrayDg[k].idproduct!=adglistpedprod.selectedItem.idproduct){
						
							tempTotDesc=tempTotDesc+Number(arrayDg[k].prec_descuento);
							tempPorcDes=tempPorcDes+Number(arrayDg[k].porc_desc);
						
						
							totgrilla=totgrilla+(arrayDg[k].price*arrayDg[k].countt);	
						
					}
					
					
				}
				
				
				
			if(Number(mskdescuentopesos.text)==0){
				totGral=totgrilla;
				totGralDesc=Number(totGralDesc.toFixed(3))-Number(Number(adglistpedprod.selectedItem.prec_descuento).toFixed(3));
				porc_desc_total=porc_desc_total-Number(adglistpedprod.selectedItem.porc_desc);
				
				
				//---------------------------------------------------------------------------------	
				
				
				
				
				
				
				
				
				
										//-------------------------------------------------------------------------------
										
										if(arrayDg.length==0){
											
											totGral=0;
											totGralDesc=0;
											precio_desc=0;
											txtdescuento.text="0.000";
											useranulo=0;
											userentrego=0;
											usercancelo=0;
											userexpidio=0;
											txtpreciop.text="";
											mskcantidad.text="";
											mskrecargo.text="0.0";
											btnremover.enabled=false;
											lblTotApagar.text="0.000";
											lblTotGral.text="0.000";
											mskanticipo.text="0.0";
											mskdescuentopesos.text="0.0";
											
											mskrecargo.text="0.000";
											porc_d=0;
											porc_desc_total=0;		
											lbldescuento.text="0.000";
											lbltotalconrecargo.text="0.000";
											lblsaldo.text="0.000"
											desc_resto=0;
											
											nrodocucli=0;
											anticipo=0;
											tot_recargo_porc=0;
											temp_tot_porc_desc=0;
											tempPorcDes=0;
											tempTotDesc=0;
											totRecargo=0;
											notas[adgNotas.selectedIndex].saldo="0.000";
											
											notas[adgNotas.selectedIndex].recargototal="0.000";
											notas[adgNotas.selectedIndex].montototalapagar="0.000";
											notas[adgNotas.selectedIndex].total="0.000";
											
											notas[adgNotas.selectedIndex].descuentonota="0.000";
											
										}else
											ereaseDellRow(recargo);
											
			
												
												
											
										
			}else
				ereaseDellRow(recargo);
			
				
				//------------------------------------------------------------------------------
				adglistpedprod.dataProvider.removeItemAt(adglistpedprod.selectedIndex);				
				arrayDg.refresh();
				notas.refresh();
				cmbproduct.setFocus();
				//------------------------------------------------------------------------------
				
				
			}
			//--------------------------------------------------------------------------------------
			protected function ereaseDellRow(recargo:Number):void{
					//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				var calcularTotalAPagar:Number=totGral-totGralDesc;
				
				
				
				recargo=tot_recargo_porc*Number(calcularTotalAPagar.toFixed(3))/100;
				
				lblTotGral.text=totGral.toFixed(3);
				lbldescuento.text=Number(-totGralDesc).toFixed(3);
				
				
				if(recargo==0){
					lbltotalconrecargo.text="0.000";					
					notas[adgNotas.selectedIndex].recargototal="0.000";
					lblTotApagar.text=Number(Number(totGral-totGralDesc)).toFixed(3);				
					
					
					lblsaldo.text=Number(Number(totGral-totGralDesc)-anticipo).toFixed(3);
					
				}else{
					
					lbltotalconrecargo.text=Number(Number(totGral-totGralDesc)+(recargo)).toFixed(3);
					lblTotApagar.text=Number(Number(totGral-totGralDesc)+(recargo)).toFixed(3);
					lblsaldo.text=Number(Number(totGral-totGralDesc)+(recargo)-anticipo).toFixed(3);
					
				}
				
				
				
				
							
					
					
				
				
				
				
				notas[adgNotas.selectedIndex].montototalapagar=Number(Number(totGral-Number(totGralDesc.toFixed(3)))+Number(recargo.toFixed(3))).toFixed(3);
				notas[adgNotas.selectedIndex].total=totGral.toFixed(3);	
				notas[adgNotas.selectedIndex].descuentonota=Number(-totGralDesc).toFixed(3);
				notas[adgNotas.selectedIndex].recargototal=Number(Number(totGral-Number(totGralDesc.toFixed(3)))+Number(recargo.toFixed(3))).toFixed(3);
				notas[adgNotas.selectedIndex].saldo=Number(Number(totGral-Number(totGralDesc.toFixed(3)))+Number(recargo.toFixed(3))-anticipo).toFixed(3);
				
				
					//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			
			
			}
			
			protected function operation4_resultHandler(event:ResultEvent):void
			{
				
				xmltarjetas=new XMLList(event.result);
				cmbTarjetasCreditoDebito.dataProvider=tarjetas;
				
			}
			
			protected function operation4_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR AL OBTENER LAS TARJETAS DE DEBITO");
				
			}
			
			protected function btnRegargarlistado_clickHandler(event:MouseEvent):void
			{
				wsnotas.getRecorCountNotas();
				
			}
			
			protected function operation5_resultHandler(event:ResultEvent):void
			{
				
				if(event.result.toString().indexOf("Error no paso nada ")!=-1)
					Alert.show("LA CONSULTA NO ARROJÓ RESULTADOS!!!");
					
				else{
					if(event.result.toString().indexOf("nota no encontrada")!=-1)
						Alert.show("NOTA DE PEDIDO NO ENCONTRADA!!!");
					else{
						if(event.result.toString().indexOf("No se puede realizar la operacion de Actualizacion o Borrado")!=-1)
							Alert.show("NO SE PUEDE REALIZAR\n LA OPERACION DE ACTUALIZACIÓN O BORRADO!!!");
						else{
							
							xmlNotas=new XMLList(event.result);
							
							addgrid();
							
							btnRegargarlistado.enabled=true;
							limpiarGrids();
							limpiarControlesVarios();
							adgNotas.selectedIndex=0;
							adgNotas.validateNow();
							addinfo();
							
							
							
						
						
						}
						
					
					}
					
				}
				
			}
			
			protected function operation5_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error al recargar notas de pedido");
				
			}
			protected function btnImprimir_clickHandler(event:MouseEvent):void
			{
				
				if(adgNotas.selectedItem.id>0){
					
					var source:String="http://localhost:8080/WebMelanie2/ShowReportNotaPedido?nronota="+adgNotas.selectedItem.id;
					
					var urlReq:URLRequest= new URLRequest(source);
					navigateToURL(urlReq,"_blank");
				}else
					Alert.show("DEBE SELECCIONAR UNA NOTA DE PEDIDO");
			
				
			}
			//----------------------------------------------------------------------------
			protected function verificoVendedorConSuPassword():Boolean{
			var b:Boolean=false;
				
				if(cmbVendedores.text.length>0){
					
					for(var i:int=0;i<empleadoslist.length;i++){
						if(cmbVendedores.selectedItem.nameuser==empleadoslist[i].nameuser&&txtpassword.text==empleadoslist[i].clave){
							b=true;
							break;
						}
						
						
					}
					
					if(b)
						return true;
					else
						Alert.show("   Datos Incorrectos!   ");
				}else
					Alert.show("   Debe ingresar un Vendedor con su clave personal   ");
				
			return b;
			}
			protected function btnguardarentregada_clickHandler(event:MouseEvent):void
			{
				var b:Boolean=false;
				
				
				if(adgNotas.selectedItem.id>0){
						if(rdbentregadosi.selected==true){
							if(verificoVendedorConSuPassword())
									wsnotas.entregarNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,1);
						}else{						
								if(rdbentregadono.selected==true){
									if(verificoVendedorConSuPassword())
										wsnotas.entregarNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,0);
								}
						}
				}else
					Alert.show("   Debe seleccionar una nota en la grilla   ");
				
				
				
					
					
					
			}
			
			protected function operation6_resultHandler(event:ResultEvent):void
			{var result:int=event.result.toString();
				cmbVendedores.text="";
				txtpassword.text="";
				
				switch(result)
				{
					case -1:
					{
						Alert.show("ERROR EN EL SERVIDOR, VERIFIQUE");
						break;
					}
						
					default:
					{
						Alert.show("NOTA "+result+" MODIFICADO ESTADO ENTREGADO");
						
						
						wsnotas.getRecorCountNotas();
						break;
					}
				}
				
			}
			
			protected function operation6_faultHandler(event:FaultEvent):void
			{
				Alert.show("   ERROR AL EJECUTAR ENTREGA DE NOTA DE PEDIDO   ");
			}
			
			protected function operation7_resultHandler(event:ResultEvent):void
			{
				var anulado:int=event.result.toString();
				cmbVendedores.text="";
				txtpassword.text="";
				switch(anulado)
				{
					case -1:
					{
						Alert.show("Error al anular nota de pedido, verifique");
						break;
					}
						
					default:
					{
						Alert.show("NOTA DE PEDIDO "+anulado+" CAMBIO DE ESTADO ANULADO");
						wsnotas.getRecorCountNotas();
						break;
					}
				}
				
			}
			
			protected function operation7_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error al anular nota de pedido");
			}
			
			protected function operation8_resultHandler(event:ResultEvent):void
			{
				var cancelado:int=event.result.toString();
				cmbVendedores.text="";
				txtpassword.text="";
				switch(cancelado)
				{
					case -1:
					{
					Alert.show("Error al cancelar nota verifique");
						break;
					}
						
					default:
					{
						Alert.show("   NOTA DE PEDIDO "+cancelado+" CAMBIO DE ESTADO CACELADO   ");
						wsnotas.getRecorCountNotas();
						break;
					}
				}
				
			}
			
			protected function operation8_faultHandler(event:FaultEvent):void
			{
				Alert.show("Error al cancelar nota de pedido");
			}
			
			protected function button1_clickHandler(event:MouseEvent):void
			{
				
				var b:Boolean=false;
				
				
				if(adgNotas.selectedItem.id>0){
					if(rdbcanceladanotasi.selected==true){
						if(verificoVendedorConSuPassword())
							wsnotas.cancelarNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,1);
					}else{						
						if(rdbcanceladanotano.selected==true){
							if(verificoVendedorConSuPassword())
								wsnotas.cancelarNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,0);
						}
					}
				}else
					Alert.show("Debe seleccionar una nota en la grilla");
				
			}
			
			protected function button2_clickHandler(event:MouseEvent):void
			{
				var b:Boolean=false;
				
				
				if(adgNotas.selectedItem.id>0){
					if(rdanuladasi.selected==true){
						if(verificoVendedorConSuPassword())
							wsnotas.anularNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,1);
					}else{						
						if(rdanuladano.selected==true){
							if(verificoVendedorConSuPassword())
								wsnotas.anularNotaPedido(adgNotas.selectedItem.id,cmbVendedores.selectedItem.id,0);
						}
					}
				}else
					Alert.show("Debe seleccionar una nota en la grilla");
				
			}
			
			protected function operation9_resultHandler(event:ResultEvent):void
			{
				var result:int=int(event.result.toString());
				PopUpManager.removePopUp(popup);
				
				switch(result)
				{
					case 0:
					{
						Alert.show("NO PASO NADA VERIFIQUE!!!");	
						break;
					}
					case -1:
					{
						Alert.show("  ERROR EN EL SERVIDOR AL ACTUALIZAR NOTA DE PEDIDO  ");
						break;
					}
					case -2:
					{
						Alert.show("NOTA DE PEDIDO NO ENCONTRADA");
						break;
					}
					case -3:
					{
						Alert.show("NO PASO NADA VERIFIQUE!!!");
						break;
					}
					case -4:
					{
						Alert.show("  ERROR EN EL SERVIDOR AL PROCESAR NOTA DE PEDIDO  ");
						break;
					}	
						
					default:
					{
						Alert.show("NOTA DE PEDIDO ACTUALIZADA "+result);
						wsnotas.getRecorCountNotas();
						limpiarControles();
						break;
					}
				}
				
				
				
			}
			
			protected function operation9_faultHandler(event:FaultEvent):void
			{
				PopUpManager.removePopUp(popup);
				Alert.show("Error al actualizar nota de pedido");
			}
			protected function btnactualizar_clickHandler(evt:MouseEvent):void
			{
				
							if(String(notas[adgNotas.selectedIndex].fechaentrega).length>0){
									if(String(notas[adgNotas.selectedIndex].fechacompra).length>0){
										
											if(adgNotas.selectedIndex>-1&&idnota==int(notas[adgNotas.selectedIndex].id)){
															if(String(cmbVendedores.selectedItem.clave)==txtpassword.text){
																	
																		Alert.show("   Desea Guardar Nota De Pedido Actual?","Confirmar Operación  ", Alert.YES | Alert.NO, this, actualizar, null, Alert.NO);
																	
																	
															}else
																Alert.show("El password del empleado no es correcto");
											}else
												Alert.show("SELECCIONE LA NOTA CORRESPONDIENTE");
									}else
										Alert.show("Falta la fecha de compra");
							}else
								Alert.show("Falta la fecha de entrega");
				
			}
			protected function actualizar(evt:CloseEvent):void
			{
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				
				if(arrayDg.length>0){
					popup=Progress(PopUpManager.createPopUp(this,Progress,true));
					PopUpManager.centerPopUp(popup);
					
				
					wsnotas.actualizarNotaPedido(getDatosXML());
				
					
				
				}
				
				
			}
			private function limpiarGrids():void{
				//----------------------------------------------------------
				detallenotasList.removeAll();
				
				adglistpedprod.dataProvider.removeItems();
				
				adghistorico.dataProvider.removeAll();
				
				arrayDg.removeAll();
				arrayDg.refresh();
				listhistorico.removeAll();
				
				//----------------------------------------------------------
			
			}
			private function limpiarControlesVarios():void{
				totGral=0;
				txtpreciop.text="";
				mskdocumento.text="";
				lblexpidiovendedor.text="";
				lblnombreyapecli.text="";
				lblvendedocancelo.text="";
				lblvendedoranulo.text="";
				lblvendedorentrego.text"";
				mskrecargo.text="";
				
				totGralDesc=0;
				precio_desc=0;
				txtdescuento.text="0.0";
				
				mskrecargo.text="0.0";
				
				
				mskdescuentopesos.text="0.0";
				mskanticipo.text="0.0";
				mskcantidad.text="";			
				txtobservaciones.text="";
				nrodocucli=0;
				btnremover.enabled=false;
				btnEliminarNota.enabled=false;
				useranulo=0;
				userentrego=0;
				usercancelo=0;
				userexpidio=0;
				
				lblTotApagar.text="0.000";
				lblTotGral.text="0.000";
				porc_d=0;
				porc_desc_total=0;
				lbldescuento.text="0.000";
				lbltotalconrecargo.text="0.000";
				lblsaldo.text="0.000";
				desc_resto=0;
				tot_recargo_porc=0;
				anticipo=0;
				totRecargo=0;
				txtpassword.text="";
				cmbTarjetasCreditoDebito.selectedItemId=0;
				cmbVendedores.text="";
				txtpassword.text="";
				
			}
			protected function limpiarControles():void{
				limpiarGrids();
				limpiarControlesVarios();
				cmbproduct.text="";
				cmbproduct.setFocus();
				txtpreciop.text="";
				mskisearchidnota.text="";
				
				
				
				
				
			
			
			}
			//*************************************************************************************++
			protected function btnCloseClientComponent_clickHandler(event:MouseEvent):void
			{
				this.removeAllElements();	
			}
			//*************************************************************************************++
			
			protected function adgNotas_clickHandler(event:MouseEvent):void
			{
				addinfo();
			}
			protected function result_deleteNote(event:ResultEvent):void{
				var retorno:int=int(event.result.toString());
				
				switch(retorno)
				{
					case 0:
					{
						Alert.show("NO PASO NADA");
						break;
					}
					case -2:
					{
						Alert.show("NOTA DE PEDIDO NO ENCONTRADA EN LA BASE DE DATOS");
						break;
					}
					case -1:
					{
						Alert.show("ERROR AL ELIMINAR NOTA DE PEDIDO");	
						break;
					}	
						
					default:
					{
						Alert.show("NOTA DE PEDIDO ELIMINADA DE LA BASE DE DATOS");
						limpiarControles();
						wsnotas.getRecorCountNotas();
						break;
					}
				}
				
				
			
			}
			protected function fault_deleteNote(event:FaultEvent):void{
				
				Alert.show("Se produjo un error al eliminar nota de pedido verifique!!!");
			
			}
			
			protected function button3_clickHandler(event:MouseEvent):void
			{
				if(cmbVendedores.selectedItemId>0){
					if(txtpassword.text.length>0){
							if(cmbVendedores.selectedItem.clave==txtpassword.text){
								if(adgNotas.selectionLength>0)
									Alert.show("Desea eliminar la nota de pedido N° "+notas[adgNotas.selectedIndex].id,"Confirmar Eliminación   ", Alert.YES | Alert.NO, this, delNoteRow, null, Alert.NO);
								else
									Alert.show("Debe seleccionar una nota de pedido\n para realizar la operación")
							}else
								Alert.show("Dato Incorrecto!");
					}else
						Alert.show("Dato Incorrecto!");
				}else
					Alert.show("Debe seleccionar un Empleado");
			}
			protected function delNoteRow(cls:CloseEvent):void{
				if ((cls.detail == Alert.NO) || (cls.detail == Alert.CANCEL)) return;
				var idnota:int=notas[adgNotas.selectedIndex].id;
				var idEmpleado:int=cmbVendedores.selectedItem.id;
				wsnotas.eliminarNotaDePedido(idnota,idEmpleado);
			
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<s:XMLListCollection id="tarjetas" source="{xmltarjetas.item}"/>
		<s:XMLListCollection id="productlist" source="{xmlproduct.producto}"/>
		<s:XMLListCollection id="listhistoricoselected" />
		<s:ArrayCollection id="listhistorico"  />
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:ArrayCollection id="arrayDg"/>
		<s:DateTimeFormatter id="dtf" dateTimePattern="dd/MM/yyyy"/>
		<s:WebService id="wsnotas" wsdl="http://localhost:8080/ServiceNotaPedido/NotaPedidoWs?WSDL" showBusyCursor="true">
			<s:operation name="actualizarNotaPedido"
						 result="operation9_resultHandler(event)"
						 fault="operation9_faultHandler(event)">
				
			</s:operation>
			<s:operation name="cancelarNotaPedido"
						 result="operation8_resultHandler(event)"
						 fault="operation8_faultHandler(event)">
				
			</s:operation>
			<s:operation name="anularNotaPedido"
						 result="operation7_resultHandler(event)"
						 fault="operation7_faultHandler(event)">
				
			</s:operation>
			<s:operation name="entregarNotaPedido"
						 result="operation6_resultHandler(event)"
						 fault="operation6_faultHandler(event)">
				
			</s:operation>
			<s:operation name="getRecorCountNotas"
						 result="operation1_resultHandler(event)"
						 fault="operation1_faultHandler(event)">
				
			</s:operation>
			<s:operation name="selectAllNotas"
						 result="operation2_resultHandler(event)"
						 fault="operation2_faultHandler(event)">
				
			</s:operation>
			<s:operation name="verNotasPedidoPaginadas"
						 result="operation3_resultHandler(event)"
						 fault="operation3_faultHandler(event)">
				
			</s:operation>
			<s:operation name="selectUnaNota"
						 result="operation5_resultHandler(event)"
						 fault="operation5_faultHandler(event)"
				/>
			<s:operation name="eliminarNotaDePedido"
						 result="result_deleteNote(event)"
						 fault="fault_deleteNote(event)">
				
			</s:operation>
				
		</s:WebService>
		<s:WebService id="wsempleados" wsdl="http://localhost:8080/ServicesEmpleados/EmpleadosWs?WSDL" showBusyCursor="false">
			<s:operation name="selectAllEmpleados"
						 fault="operation2_faultHandlerSelectAllEmpleados(event)"
						 result="operation2_resultHandlerSelectAllEmpleados(event)">
				
			</s:operation>
		</s:WebService>
		<s:WebService id="wstarjetascreditodebito" 
					  wsdl="http://localhost:8080/ServiceTarjetas/TartjetasWs?WSDL" showBusyCursor="true"
					  >
			<s:operation name="searchAllTarjetasCreditoDebito" result="operation4_resultHandler(event)" fault="operation4_faultHandler(event)">
				
			</s:operation>
		</s:WebService>
		<s:WebService id="productosWs" wsdl="http://localhost:8080/ServiceProductos/ProductosWs?wsdl"
					  showBusyCursor="true">
			<s:operation name="searchAllProductos"
						 fault="operation1_faultGetRecord(event)"
						 result="operation1_resulGetRecord(event)">
				
			</s:operation>
		</s:WebService>
		<s:XMLListCollection id="notas" source="{xmlNotas.item}"/>
	
		<s:XMLListCollection id="detallenotas"/>		
		<s:ArrayCollection id="detallenotasList"/>
		<s:CurrencyFormatter id="cf" currencySymbol="$" fractionalDigits="3" locale="es-AR"  
							 decimalSeparator="." groupingSeparator="," currencyISOCode="locale and OS dependent" useCurrencySymbol="false"/>
		<s:Label x="479" y="150" text="Observaciones:"/>
		<s:XMLListCollection id="empleadoslist" source="{xmlListEmpleados.item}"/>
		<s:NumberFormatter id="formaternumbergrid" fractionalDigits="3" decimalSeparator="."  />
	</fx:Declarations>
	
	<s:Button id="first_btn" x="2" y="127" width="85" height="27" label="&lt;&lt;"
			  click="first_clickHandler(event)" enabled="false" fontSize="16" fontWeight="bold"/>
	<s:Button id="prev_btn" x="313" y="127" width="88" height="27" label="&lt;"
			  click="prev_btn_clickHandler(event)" enabled="false" fontSize="16" fontWeight="bold"/>
	<s:Button id="next_btn" x="610" y="127" width="84" height="26" label="&gt;"
			  click="next_btn_clickHandler(event)" enabled="false" fontSize="16" fontWeight="bold"/>
	<s:Button id="last_btn" x="919" y="127" width="89" height="28" label="&gt;&gt;"
			  click="last_clickHandler(event)" enabled="false" fontSize="16" fontWeight="bold"/>
	
	<s:DataGrid id="adgNotas" x="2" y="0" width="1006" height="127"
				alternatingRowColors="[#ffffff,#fcff4f7]" click="adgNotas_clickHandler(event)"
				doubleClick="adgNotas_doubleClickHandler(event)" doubleClickEnabled="true"
				selectedIndex="0" selectionMode="singleRow"
				toolTip="Haga doble click para seleccionar la Nota correspondiente"
				variableRowHeight="true">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn headerText="N° Nota" dataField="id"/>
				<s:GridColumn headerText="Fecha Compra" dataField="fechacompra"
							  rendererIsEditable="true"  >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<mx:DateField editable="true" text="@{data.fechacompra}" formatString="DD/MM/YYY" 
											  horizontalCenter="0" verticalCenter="0"
											  width="80%"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
					
				</s:GridColumn>
				<s:GridColumn headerText="Fecha Entrega" dataField="fechaentrega"
							  rendererIsEditable="true"  >
					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<mx:DateField editable="true" text="@{data.fechaentrega}" formatString="DD/MM/YYY" 
											  horizontalCenter="0" verticalCenter="0"
											  width="80%"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
					
				</s:GridColumn>
				<s:GridColumn headerText="Total General" dataField="total" formatter="{formaternumbergrid}"/>
				<s:GridColumn headerText="Descuento Total" dataField="descuentonota" formatter="{formaternumbergrid}"/>
				<s:GridColumn headerText="Total a Pagar" dataField="montototalapagar" formatter="{formaternumbergrid}"/>
				<s:GridColumn headerText="Recargo Total" dataField="recargototal" formatter="{formaternumbergrid}"/>
				<s:GridColumn headerText="Saldo" dataField="saldo" formatter="{formaternumbergrid}"/>
				<s:GridColumn  dataField="horacompra" visible="false"/>
				<s:GridColumn  dataField="fechaanulado" visible="false"/>
				<s:GridColumn  dataField="fecancel" visible="false"/>
				
			</s:ArrayList>
		</s:columns>		
	</s:DataGrid>
	<s:Label x="595" y="155" fontFamily="Verdana" fontSize="10" text="Vendedor Expidio:"/>
	<s:Label x="21" y="167" fontFamily="Verdana" fontSize="16" fontWeight="normal" text="Cliente:"/>
	<s:Label id="lblnombreyapecli" x="87" y="157" width="288" height="25" fontSize="16"
			 verticalAlign="bottom"/>
	<s:TextArea id="txtobservaciones" x="384" y="201" width="845" height="79" maxChars="32000"/>
	
	<mx:AdvancedDataGrid id="adglistpedprod" x="7" y="283" width="809" height="129"
						 alternatingItemColors="[#adf1f5, white]"
						editable="item group summary"	
						 designViewDataType="flat" doubleClickEnabled="true" 
						 fontFamily="Verdana" itemDoubleClick="adglistpedprod_itemDoubleClickHandler(event)" fontSize="15"
						 rowCount="8"
						 variableRowHeight="true" toolTip="Para editar, cantidad, precio, etc seleccione la celda correspondiente, para borrar un producto haga doble click">
		<mx:columns>
			<mx:AdvancedDataGridColumn id="idproducto" visible="false" dataField="idproduct"/>			
			<mx:AdvancedDataGridColumn  width="52" dataField="id" editable="false"
									   fontFamily="Verdana" fontSize="10" headerText="Codigo"
									   resizable="false" textAlign="left" textDecoration="none"/>
			<mx:AdvancedDataGridColumn width="84" dataField="name" editable="false"
									   fontFamily="Verdana" fontSize="10" headerText="Descripcion"
									   resizable="false" textAlign="left"/>
			<mx:AdvancedDataGridColumn width="35" dataField="countt" editable="true"  
									   fontFamily="Verdana" fontSize="10" headerText="Cantidad"
									   resizable="false" sortable="false" textAlign="center"/>
			<mx:AdvancedDataGridColumn width="45" dataField="price" draggable="false" editable="true"
									   fontFamily="Verdana" fontSize="10" formatter="{cf}"
									   headerText="PrecioU" resizable="true" sortable="false" color="green"
									   textAlign="center"/>
			<mx:AdvancedDataGridColumn editable="true" dataField="porc_desc" fontFamily="Verdana" fontSize="10"
									   headerText="% Descuento" resizable="false" sortable="false" color="red"
									   textAlign="center" width="33"/>
			<mx:AdvancedDataGridColumn width="33" dataField="prec_descuento" editable="false"
									   fontFamily="Verdana" fontSize="10" formatter="{cf}" color="red"
									   headerText="Precio Desc"/>
			<mx:AdvancedDataGridColumn width="52" color="red" dataField="subtotal" draggable="false"
									   editable="false" fontFamily="Verdana" fontSize="10"
									   fontWeight="bold" formatter="{cf}" headerText="SubTotal"
									   resizable="false" sortable="false" textAlign="right"/>
			<mx:AdvancedDataGridColumn  visible="false" dataField="idnota"/>
		</mx:columns>
	</mx:AdvancedDataGrid>
	<s:Label x="509" y="442" color="#062C6C" fontFamily="Verdana" fontSize="16" fontWeight="bold"
			 text="TOTAL GENERAL $:" verticalAlign="top"/>
	<s:Label id="lblTotGral" x="678" y="440" width="124" color="#062C6C" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="0.0" textAlign="right" verticalAlign="bottom"/>
	<s:Label x="513" y="478" color="#06820F" fontFamily="Verdana" fontSize="16" fontWeight="bold"
			 text="TOTAL A PAGAR $:"/>
	<s:Label id="lblTotApagar" x="675" y="477" width="127" color="#06820F" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="0.0" textAlign="right" verticalAlign="bottom"/>
	<s:Label x="482" y="459" width="200" height="14" color="#F84B07" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="DESCUENTO TOTAL $:"/>
	<s:Label id="lbldescuento" x="677" y="459" width="125" color="#F84B07" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="0.0" textAlign="right"/>
	<s:Label x="457" y="498" width="223" color="#04667F" fontFamily="Verdana" fontSize="16"
			 fontWeight="bold" text="TOTAL CON RECARGO $:" textAlign="right"/>
	<s:Label x="457" y="516" width="223" color="#89908D" fontFamily="Verdana" fontSize="16"
			 fontWeight="bold" text="SALDO $:" textAlign="right"/>
	<s:Label id="lbltotalconrecargo" x="678" y="496" width="124" color="#04667F" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="0.0" textAlign="right"/>
	<s:Label id="lblsaldo" x="678" y="515" width="124" color="#89908D" fontFamily="Verdana"
			 fontSize="16" fontWeight="bold" text="0.0" textAlign="right"/>
	<s:Label x="570" y="542" fontFamily="Verdana" fontSize="16" fontWeight="normal" text="RECARGO %:"
			 textAlign="right"/>
	<controls:MaskedTextInput id="mskrecargo" x="679" y="534" width="74" fontFamily="Verdana" text="0.000" maxChars="5"
							  fontSize="16" restrict="0-9." toolTip="Ingresa un Porcentaje de recargo total para los productos cargados, para poder realizar el calculo debe presionar la tecla Enter"/>
	<s:Label x="574" y="571" fontFamily="Verdana" fontSize="16" fontWeight="normal" text="ANTICIPO $:"
			 textAlign="right"/>
	<controls:MaskedTextInput text="0.000" maxChars="5" id="mskanticipo" x="679" y="563" width="74" fontFamily="Verdana"
							  fontSize="16" restrict="0-9." toolTip="Calcula el anticipo, para poder realizar el calculo debe presionar la tecla Enter"/>
	<s:Label x="8" y="200" fontFamily="Verdana" fontSize="16" text="Producto:"/>
	<s:Label x="14" y="230" fontFamily="Verdana" fontSize="16" text="Precio $:"/>
	<s:TextInput id="txtpreciop" x="88" y="221" width="233" fontSize="16" fontWeight="bold"
				 maxChars="6" restrict="0-9." tabEnabled="false" prompt="Ingrese precio de producto..."/>
	<s:Label x="6" y="263" fontFamily="Verdana" fontSize="16" text="Cantidad:"/>
	<controls:MaskedTextInput id="mskcantidad" x="88" y="253" width="55" fontFamily="Verdana"
							  tabEnabled="false" fontSize="16" fontWeight="bold" maxChars="3" restrict="0-9"/>
	<components:AutoComplete id="cmbproduct" prompt="Ingrese un Producto..." x="88" y="187" width="233" allowDuplicates="false"
							 dropDownRowCount="10" fontSize="16" fontWeight="bold"
							 labelField="descripcion" matchType="beginning" tabEnabled="false">
	</components:AutoComplete>
	<s:Button id="btnremover" x="7" y="417" width="153" height="40" label="Remover Todo"
			  click="btnremover_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Elimina todos Los productos del Listado!!!"/>
	<s:Button id="brncargarunproducto" x="7" y="459" width="153" height="38" label="Cargar Producto"
			  click="brncargarunproducto_clickHandler(event)" fontSize="16"
			  toolTip="Muestra una Ventana para cargar un Producto"/>
	<s:Label x="202" y="265" fontFamily="Verdana" fontSize="16" fontWeight="normal" text="% Descuento:"/>
	<controls:MaskedTextInput text="0.00" maxChars="5" x="318" y="257" width="60" fontFamily="Verdana" fontSize="16" id="txtdescuento" restrict="0-9." toolTip="Ingresa un porcentaje de descuento, aplicable a todos los productos de la planilla"/>
	<s:Label x="824" y="392" fontSize="16" fontWeight="bold" text="EMPLEADOS:"/>
	<components:AutoComplete id="cmbVendedores" x="824" y="407" width="261" allowDuplicates="false"
							 dropDownRowCount="10" fontFamily="Verdana" fontSize="16"
							 fontWeight="bold" labelField="nameuser" matchType="beginning"
							 prompt="Seleccione un Empleado...">
	</components:AutoComplete>
	<s:Label x="1021" y="28" fontSize="14" fontWeight="bold" text="Nota de pedido entregada"/>
	<s:Label x="1022" y="80" fontSize="14" fontWeight="bold" text="Nota de pedido cancelada"/>
	<s:VGroup x="1020" y="93" width="38" height="44">
	</s:VGroup>
	<s:RadioButton id="rdbentregadosi" x="1022" y="40" label="Si" groupName="GrupoEntregado"/>
	<s:RadioButton id="rdbentregadono" x="1022" y="58" label="No" groupName="GrupoEntregado"
				   selected="true"/>
	<s:Label x="1022" y="143" fontSize="14" fontWeight="bold" text="Nota anulada"/>
	<s:VGroup x="1021" y="155" width="39" height="44">
	</s:VGroup>
	<s:Label x="824" y="446" fontFamily="Arial" fontSize="16" fontWeight="bold" text="PASSWORD:"/>
	<s:TextInput id="txtpassword" x="825" y="467" width="260" displayAsPassword="true"
				 fontFamily="Verdana" fontSize="16" fontStyle="italic"
				 prompt="Ingresar password del Empleado..."/>
	<s:Button id="btnguardarentregada" x="1065" y="43" width="91" height="33" label="Entregar"
			  click="btnguardarentregada_clickHandler(event)" fontSize="16"
			  toolTip="Almacena el estado de Entregado de la Nota de Pedido Seleccionada"/>
	<s:Button x="1066" y="97" width="90" height="33" label="Cancelar"
			  click="button1_clickHandler(event)" fontSize="16"
			  toolTip="Cambia el estado cancelada de la Nota de Pedido Seleccionada"/>
	<s:Button x="1067" y="159" width="88" height="33" label="Anular"
			  click="button2_clickHandler(event)" fontSize="16"
			  toolTip="Cambia el estado de anulada de la Nota de Pedido Seleccionada"/>
	<components:AdvancedAutoComplete id="cmbTarjetasCreditoDebito" prompt="Seleccione una Tarjeta de Crédito..." x="823" y="300" width="295"
									 fontSize="16" labelField="descripcion"
									 toolTip="Seleccione una Tarjeta de Crédito o Débito si el cliente utiliza esta forma de pago!!!">
	</components:AdvancedAutoComplete>
	<s:Label x="823" y="288" fontSize="14" fontWeight="bold" text="Tarjetas de Crédito / Débito" toolTip="Seleccione si o no para registrar que la nota de pedido fue entregada al Cliente"/>
	<controls:MaskedTextInput id="txtnumerocuponpago" x="825" y="357" fontFamily="Verdana"
							  fontSize="16" inputMask="####-####-####-####" maxChars="19"
							  toolTip="Ingrese en Número de Tarjeta de Crédito o Débito del Plástico"/>
	<s:Label x="823" y="341" fontSize="14" fontWeight="bold"
			 text="Número de cupón tarjeta de credito/debito:"/>
	<s:DataGrid id="adghistorico" x="826" y="514" width="203" height="102"
				alternatingRowColors="[#adf1f5, white]" fontFamily="Verdana" fontSize="10"
				requestedRowCount="4">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="fecharegistro" headerText="FechaRegistro"></s:GridColumn>
				<s:GridColumn dataField="anticipo" formatter="{cf}" headerText="Anticipo"></s:GridColumn>				
			</s:ArrayList>
		</s:columns>		
	</s:DataGrid>
	<s:Label x="826" y="499" fontSize="16" fontWeight="bold" text="HISTORICO DE ANTICIPOS"/>
	<s:Button id="btnRegargarlistado" x="7" y="499" width="153" height="37" label="Recargar Listado"
			  click="btnRegargarlistado_clickHandler(event)" enabled="false" fontSize="16"/>
	<controls:MaskedTextInput id="mskisearchidnota" x="215" y="432" width="232" fontSize="16"
							  restrict="0-9" textAlign="center"
							  toolTip="Ingrese Número de Nota de Pedido, debe presinar la tecla Enter para realizar la Búsqueda!!!"/>
	<s:Label x="213" y="418" fontFamily="Verdana" fontSize="16" fontWeight="normal"
			 text="BUSCAR NOTA DE PEDIDO"/>
	<s:Button id="btnImprimir" x="7" y="539" width="153" height="35" label="Imprimir"
			  click="btnImprimir_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Imprimie una nota de pedido seleccionada del listado"/>
	<s:Button id="btnactualizar" x="8" y="577" width="152" height="39" label="Actualizar" toolTip="Actualiza el estado de la nota de pedido"
			  click="btnactualizar_clickHandler(event)" fontSize="16"/>
	<s:Button id="btnCloseClientComponent" x="1203" y="1" width="27" height="19" icon="assets/icon_close.png" click="btnCloseClientComponent_clickHandler(event)"/>
	<s:RadioButton id="rdanuladasi" x="1025" y="157" label="Si" groupName="anulada"/>
	<s:RadioButton id="rdanuladano" x="1025" y="181" label="No" groupName="anulada" selected="true"/>
	<s:Label x="383" y="166" fontSize="16" fontWeight="normal" text="Documento:"/>
	<controls:MaskedTextInput id="mskdocumento" x="469" y="158" fontFamily="Verdana" fontSize="20"
							  inputMask="########" maxChars="8" restrict="0-9"/>
	<s:Label x="382" y="188" fontSize="16" fontWeight="normal" text="Observaciones:"/>
	<s:Label id="lblvendedoranulo" x="699" y="173" width="200" height="15" fontFamily="Verdana"
			 fontSize="10" verticalAlign="bottom"/>
	<s:Label id="lblvendedorentrego" x="700" y="187" width="200" height="11" fontFamily="Verdana"
			 fontSize="10" verticalAlign="bottom"/>
	<s:Label x="591" y="167" fontFamily="Verdana" fontSize="10" text="Vendedor Canceló:"/>
	<s:Label x="604" y="179" fontFamily="Verdana" fontSize="10" text="Vendedor Anuló:"/>
	<s:Label x="594" y="189" fontFamily="Verdana" fontSize="10" text="Vendedor Entregó:"/>
	<s:Label id="lblexpidiovendedor" x="699" y="148" width="201" height="16" fontFamily="Verdana"
			 fontSize="10" verticalAlign="bottom"/>
	<s:Label id="lblvendedocancelo" x="699" y="160" width="197" height="16" fontFamily="Verdana"
			 fontSize="10" verticalAlign="bottom"/>
	<s:Label x="553" y="597" fontFamily="Verdana" fontSize="16" text="$ DESCUENTO:" />
	<controls:MaskedTextInput id="mskdescuentopesos" toolTip="Calcula el descuento en pesos, para poder realizar el calculo debe presionar la tecla Enter" x="680" y="590" width="74" fontFamily="Verdana" text="0.000" maxChars="5"  restrict="0-9."
							  fontSize="16"/>
	<s:RadioButton id="rdbcanceladanotasi" x="1023" y="93" label="Si" groupName="notaCancelada"/>
	<s:RadioButton id="rdbcanceladanotano" x="1023" y="117" label="No" groupName="notaCancelada"
				   selected="true"/>
	<s:Button id="btnEliminarNota" x="215" y="459" width="139" height="38" label="Eliminar"
			  click="button3_clickHandler(event)" enabled="false" fontFamily="Verdana" fontSize="16"
			  toolTip="Elimina una Nota de Pedido, seleccionada previamente"/>
</s:Group>



