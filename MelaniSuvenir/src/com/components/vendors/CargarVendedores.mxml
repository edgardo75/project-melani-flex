<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:controls="com.adobe.flex.extras.controls.*"
		 xmlns:components="com.hillelcoren.components.*"
		 width="722" height="534" creationComplete="group1_creationCompleteHandler(event)" xmlns:local="*">
	<fx:Script>
		<![CDATA[
			import com.actions.Employee;
			import com.hillelcoren.components.autoComplete.classes.SelectedItem;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.FlexEvent;
			import mx.events.ValidationResultEvent;
			import mx.graphics.RadialGradient;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import popus.PopupUsuarioHabilitado;
			import popus.PopupUsuario;
			
			private var vResult:ValidationResultEvent;
			
			[Bindable]
				private var listEmpleados:XMLList;
			[Bindable]
				public var listEmployee:ArrayCollection;
			[Bindable]
				private var empType:String;
			[Bindable]
			private var empId:int=0;
			
			
			private var so:SharedObject=SharedObject.getLocal("userData");
			
			protected function operationAddEmpleadosFulltime1_resultHandler(event:ResultEvent):void
			{
				var iresult:int=int(event.result);
				
				resultado(iresult);
				
			}
			
			protected function operation1AddEmpladosFullTime_faultHandler(event:FaultEvent):void
			{
				Alert.show("SE PRODUJO UN ERROR AL ALMACENAR EMPLEADO PARTIME");
				
			}
			protected function resultado(numeroRetornado:int):void{
				
				
				switch(numeroRetornado){
					case 0:
					{
						Alert.show("No pasó nada!!!");
						break;
					}
					case -1:{
						Alert.show("Se produjo un error al almacenar el empleado!!!");
						break;
					}	
					case -2:{
						Alert.show("Ya se encuentra almacenado el DNI!!!");
						break;
					}
					case -4:{
						Alert.show("Ya se encuentra almacenado el EMAIL!!!");
						break;
					}	
					case -5:{
						Alert.show("Se produjo un error en el método \n buscar nombre de usuario y email.");
						break;
					}
					case -3:{
						Alert.show("Se produjo un error en el servidor!!!");
						break;
					}
					case -6:{
						Alert.show("El nombre de usuario ya existe en la base de datos.");
						break;
					}	
					case -10:{
						Alert.show("Error al asegurar la clave de empleado.");
						break;
					}	
						
					case -11:{
						Alert.show("La Clave Ingresada, debe contener almenos\n una letra mayúscula, minúscula y un número,\n no se permiten espacion en blanco y mínimo 4 caracteres.");
						break;
					}
					case -12:{
						Alert.show("El nombre de usuario no es permitido, no ingrese caracteres especiales.");
						break;
					}				
					case -14:{
						Alert.show("El nombre del empleado no es válido!!!");
						break;
					}		
					case -15:{
						Alert.show("El apellido no es válido!!!");
						break;
					}		
					case -15:{
						Alert.show("El DNI no es válido!!!");
						break;
					}			
					case -17:{
						Alert.show("Elija otra clave, no pasó la fase de seguridad");
						break;
					}				
					default:
					{
						limpiarcontroles();
						wsempleado.selectAllEmpleados();
						break;
					}
				}
				
			
			}
			protected function operationAddEmpleadosPartime1_resultHandler(event:ResultEvent):void
			{
				
				var iresult:int=int(event.result);
				
				resultado(iresult);
				
			}
			
			protected function operationAddEmpleadosPartime1_faultHandler(event:FaultEvent):void
			{
				Alert.show("SE PRODUJO UN ERROR AL ALMACENAR DATOS DE EMPLEADO");
				
			}
			
			
			protected function operationSelectAllEmpleados_resultHandler(event:ResultEvent):void
			{
				
				if(event.result.toString().indexOf("item")!=-1){
								listEmpleados=new XMLList(event.result);
								var employee:Employee;
								
								
									listEmployee=new ArrayCollection();
								
								for(var i:int=0;i<xmllistEmpleados.length;i++){	
									employee=new Employee();
									employee.id=xmllistEmpleados[i].id;
									employee.apellido=String(xmllistEmpleados[i].apellido).toUpperCase();
									employee.nombre=String(xmllistEmpleados[i].nombre).toUpperCase();
									employee.documento=String(xmllistEmpleados[i].documento);
									employee.nameuser=xmllistEmpleados[i].nameuser;
									employee.clave=xmllistEmpleados[i].clave;
									employee.email=xmllistEmpleados[i].email;
									employee.observaciones=xmllistEmpleados[i].observaciones;
									employee.genero=xmllistEmpleados[i].genero;
									employee.tipodocu=xmllistEmpleados[i].tipodocu;
									employee.emptype=xmllistEmpleados[i].emptype;
									employee.salario=xmllistEmpleados[i].salario;
									employee.salarioporhora=xmllistEmpleados[i].salarioporhora;
									
									if(String(xmllistEmpleados[i].estado)=="1")
										employee.estado=true;						
									
									listEmployee.addItem(employee);			
								
								}
								
								listEmployee.refresh();
								
								if(listEmployee.length>0 && btndeshabilitar.enabled==false||btnhabilitar.enabled==false){
									btndeshabilitar.enabled=true;
									btnhabilitar.enabled=true;
								}
								
								adgemployee.selectedIndex=0;
								adgemployee.validateNow();
								addInfo();
				}
				
				
			}
			
			protected function operationselectAllEmpleados_faultHandler(event:FaultEvent):void
			{
				Alert.show("Se produjo un error al tratar de conseguir datos de los empleados");
				
			}
			
		
			
			
			
			protected function btnNuevo_clickHandler(event:MouseEvent):void
			{			
					
					limpiarcontroles();
					habilitarComponentes();	
					btnGuardar.enabled = true;
					btnActualizar.enabled = false;
					btnEditar.enabled = false;
					btnCancelar.enabled = true;
					txtnombre.setFocus();	
					empId=0;
				
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			public function validateForm():Boolean{
				var validatorArray:Array=new Array();
				validatorArray.push(emV);
				validatorArray.push(apeV);
				validatorArray.push(nomV);
				validatorArray.push(txtdocumento);
				validatorArray.push(cmbTiposdocu);
				validatorArray.push(cmbGeneros);
				validatorArray.push(nomuserV);
				validatorArray.push(passV);
				validatorArray.push(passreV);
				validatorArray.push(msksalario);
				validatorArray.push(msksalarioxhora);
				
				
				var validatorErrorArray:Array = Validator.validateAll(validatorArray);
				var isValidForm:Boolean = validatorErrorArray.length == 0;                
				return isValidForm
				
				
			}
			//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				
				cmbGeneros.selectedItemId=2;
				cmbTiposdocu.selectedItemId=3;
				
				txtapellido.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtdocumento.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtemail.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtnameuser.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtnombre.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtobservaciones.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtpassword.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtrepassword.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				msksalario.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				msksalarioxhora.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				cmbTiposdocu.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				cmbGeneros.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				btnGuardar.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				
				wsempleado.selectAllEmpleados();
				deshabilitarComponentes();
				so.clear();
				
				
			}
			protected function deshabilitarComponentes():void{
				
				txtapellido.enabled = false;
				txtdocumento.enabled = false;
				txtemail.enabled = false;
				txtnameuser.enabled = false;
				txtnombre.enabled = false;
				txtobservaciones.enabled = false;
				txtpassword.enabled = false;
				txtrepassword.enabled = false;
				msksalario.enabled = false;
				msksalarioxhora.enabled = false;
				cmbTiposdocu.enabled = false;
				cmbGeneros.enabled = false;
				rbempleadofull.enabled = false;
				rbempleadopart.enabled = false;
				
				
			
			}
			protected function habilitarComponentes():void{
				txtapellido.enabled = true;
				txtdocumento.enabled = true;
				txtemail.enabled = true;
				txtnameuser.enabled = true;
				txtnombre.enabled = true;
				txtobservaciones.enabled = true;
				txtpassword.enabled = true;
				txtrepassword.enabled = true;
				msksalario.enabled = true;
				msksalarioxhora.enabled = true;
				cmbTiposdocu.enabled = true;
				cmbGeneros.enabled = true;
				rbempleadofull.enabled = true;
				rbempleadopart.enabled = true;
				
				
				
				
				
			}
			private function tranferirFocus(keyPress:KeyboardEvent):void{
				if (keyPress.keyCode==Keyboard.ENTER){
					
						if(keyPress.currentTarget.toString().indexOf("txtnombre")!=-1){
							txtapellido.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtapellido")!=-1){
							txtemail.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtemail")!=-1){
							cmbTiposdocu.setFocus();
							return;
						}
						
						if(keyPress.currentTarget.toString().indexOf("cmbTiposdocu")!=-1){
							txtdocumento.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtdocumento")!=-1){
							cmbGeneros.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("cmbGeneros")!=-1){
							txtnameuser.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtnameuser")!=-1){
							txtpassword.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtpassword")!=-1){
							txtrepassword.setFocus();
							return;
						}
						if(keyPress.currentTarget.toString().indexOf("txtrepassword")!=-1){
							if(msksalario.visible==true)
								msksalario.setFocus();
							else{
								if(msksalarioxhora.visible==true)
									msksalarioxhora.setFocus();
							}	
							return;
						}
						
						if(keyPress.currentTarget.toString().indexOf("msksalario")!=-1&&msksalario.visible==true){
								btnGuardar.setFocus();
								return;
						
						}
						if(keyPress.currentTarget.toString().indexOf("msksalarioxhora")!=-1&&msksalarioxhora.visible==true){
							btnGuardar.setFocus();
							return;
							
						}
						
				
				}
			
			}
			
			protected function enabledisableradiobutton():void
			{
				if(rbempleadofull.selected==true){
						labelsalariofull.visible=true;
						msksalario.visible=true;
						labelsalariopart.visible=false;
						msksalarioxhora.visible=false;
						msksalario.setFocus();
						empType="FULLTIME";
						
				}else{
					if(rbempleadopart.selected==true){
						labelsalariofull.visible=false;
						msksalario.visible=false;
						labelsalariopart.visible=true;
						msksalarioxhora.visible=true;
						msksalarioxhora.setFocus();
						empType="PARTTIME";
					
					}
				
				}
			}
			protected function limpiarcontroles():void{
				
				txtapellido.text="";
				txtdocumento.text="";
				txtemail.text="";
				txtnameuser.text="";
				txtnombre.text="";
				txtobservaciones.text="";
				txtpassword.text="";
				txtrepassword.text="";
				msksalario.text="";
				msksalarioxhora.text="";
				cmbGeneros.selectedItemId=2;
				cmbTiposdocu.selectedItemId=3;	
				
				
			
			}
			
			protected function guardarEmpleado(evt:CloseEvent):void{
				
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				if(rbempleadofull.selected==true){
					if(msksalario.text.length==0)
						msksalario.text="0";	
					
					wsempleado.addEmpleadoFullTime(getDatosEmpleado());
					
				}else{
					if(rbempleadopart.selected==true){
						if(msksalarioxhora.text.length==0)
							msksalarioxhora.text="0";
						
					
						wsempleado.addEmpleadoParttime(getDatosEmpleado());
					}
				}
				
				
			
			}
			private function getDatosEmpleado():String{
			var empleado:String="<Empleado>" +
				
				"<apellido>" +txtapellido.text+"</apellido>" +
				"<id>" +empId+"</id>"+
				"<nombre>"+txtnombre.text+"</nombre>" +
				"<nombreUsuario>"+txtnameuser.text+"</nombreUsuario>" +
				"<email>"+txtemail.text+"</email>" +
				"<password>"+txtpassword.text+"</password>" +
				"<passwordre>"+txtrepassword.text+"</passwordre>" +				
				"<idTipoDocumento>"+int(cmbTiposdocu.selectedItem.id)+"</idTipoDocumento>" +				
				"<salario>"+Number(msksalario.text)+"</salario>" +
				"<salarioxhora>"+Number(msksalarioxhora.text)+"</salarioxhora>" +
				"<numeroDocumento>"+int(txtdocumento.text)+"</numeroDocumento>" +
				"<idGenero>"+int(cmbGeneros.selectedItem.id)+"</idGenero>" +
				"<observaciones>"+txtobservaciones.text+"</observaciones>" +
				"<tipoEmpleado>" +empType+"</tipoEmpleado>"+				
				
				"</Empleado>";
			return empleado;
			
			}
			protected function btnGuardar_clickHandler(event:MouseEvent):void
			{
				
				
				vResult=nomV.validate();
				
				if(vResult.type==ValidationResultEvent.INVALID)
					return;
				else{
					vResult=apeV.validate();
					if(vResult.type==ValidationResultEvent.INVALID)
						return;
					else{
						vResult=emV.validate();
						if(vResult.type==ValidationResultEvent.INVALID)
							return;
						else{
							if(cmbTiposdocu.selectedItem==null){
								Alert.show("   Seleccione un Tipo de Documento DNI, LE, LC, PASAPORTE   ");
								return;
							}else{
								if(txtdocumento.text.length==0){
									Alert.show("   Ingrese un número de Documento!!!    ");
									return;
								}else{
									if(txtdocumento.text.length<7){
										Alert.show("   Ingrese un número de Documento de manera correcta   ");
										return;
										
									}else{
										vResult=nomuserV.validate();
										if(vResult.type==ValidationResultEvent.INVALID)
											return;
										else{
											if(txtpassword.text.length==0||txtrepassword.text.length==0)
												Alert.show("FALTA INGRESAR O \nREINGRESAR EL PASSWORD, CORRIJA!!!");
											else{
												if(txtpassword.text!=txtrepassword.text)
													Alert.show("LOS PASSWORD NO COINCIDEN, CORRIJA!!!");
												else{
													Alert.show("Desea Guardar Datos de Empleado?","Confirmar Operación", Alert.YES | Alert.NO, this, guardarEmpleado, null, Alert.NO);
													
												}
												
											}
											
											
										}
										
									}
									
								}
								
							}	
							
						}
					}
					
				}
				
				
						
			}
			

			protected function rbempleadopart_clickHandler(event:MouseEvent):void
			{
				enabledisableradiobutton();
			}
			
			protected function rbempleadofull_clickHandler(event:MouseEvent):void
			{
				enabledisableradiobutton();
			}
			
			protected function btndeshabilitar_clickHandler(event:MouseEvent):void
			{
				if(adgemployee.selectedItem.estado==false){
				
						var popup:PopupUsuario=PopupUsuario(PopUpManager.createPopUp(this,PopupUsuario,true));
						
						popup.title="Usuario y Clave";
						popup.arrayEmployee=listEmployee;
						popup.userSelected=adgemployee.selectedItem.nameuser;
						popup.userPassSelected=adgemployee.selectedItem.clave;
						popup.userIdSelected=adgemployee.selectedItem.id;
						popup.userEstadoSelected=xmllistEmpleados[adgemployee.selectedIndex].estado;
						
						
						PopUpManager.centerPopUp(popup);
				
				}else
					Alert.show("DEBE SELECCIONAR UN EMPLEADO DE LA GRILLA O LISTADO CON EL ESTADO SIN CHEQUEAR");
			}
			
			protected function btnhabilitar_clickHandler(event:MouseEvent):void
			{
				if(adgemployee.selectedItem.estado==true){
					var popup:PopupUsuarioHabilitado=PopupUsuarioHabilitado(PopUpManager.createPopUp(this,PopupUsuarioHabilitado,true));
					popup.title="Usuario y Clave";
					popup.arrayEmployee=listEmployee;
					popup.userSelected=adgemployee.selectedItem.nameuser;
					popup.userPassSelected=adgemployee.selectedItem.clave;
					popup.userIdSelected=adgemployee.selectedItem.id;
					popup.userEstadoSelected=xmllistEmpleados[adgemployee.selectedIndex].estado;
					
					
					PopUpManager.centerPopUp(popup);
				}else
					Alert.show("DEBE SELECCIONAR UN EMPLEADO DE LA GRILLA O LISTADO CON EL ESTADO CHEQUEADO");
			}			
			protected function dgemployee_clickHandler(event:MouseEvent):void
			{
				addInfo();				
			}
			protected function addInfo():void{
							
				
				txtnombre.text=listEmployee[adgemployee.selectedIndex].nombre;
				txtapellido.text=listEmployee[adgemployee.selectedIndex].apellido;
				txtdocumento.text=listEmployee[adgemployee.selectedIndex].documento;
				
				empType=listEmployee[adgemployee.selectedIndex].emptype;
				
				
				if(String(listEmployee[adgemployee.selectedIndex].email).toString().indexOf("null")!=0)
					txtemail.text=listEmployee[adgemployee.selectedIndex].email;
				else
					txtemail.text="";
				
				txtnameuser.text=listEmployee[adgemployee.selectedIndex].nameuser;
				empId=int(listEmployee[adgemployee.selectedIndex].id);
				
				if(String(listEmployee[adgemployee.selectedIndex].observaciones).toString().indexOf("null")!=0)
					txtobservaciones.text=listEmployee[adgemployee.selectedIndex].observaciones;
				else
					txtobservaciones.text="";
				
				txtpassword.text=listEmployee[adgemployee.selectedIndex].clave;
				txtrepassword.text=listEmployee[adgemployee.selectedIndex].clave;
				cmbGeneros.selectedItemId=listEmployee[adgemployee.selectedIndex].genero;
				cmbTiposdocu.selectedItemId=listEmployee[adgemployee.selectedIndex].tipodocu;
				
							if(empType=="FULLTIME"){
								
											labelsalariofull.visible=true;
											msksalario.visible=true;
											labelsalariopart.visible=false;
											msksalarioxhora.visible=false;
											rbempleadopart.selected=false;
											msksalario.text=listEmployee[adgemployee.selectedIndex].salario;							
											rbempleadofull.selected=true;				
											
										}else{
											
											
											
											labelsalariofull.visible=false;
											msksalario.visible=false;
											labelsalariopart.visible=true;
											msksalarioxhora.visible=true;
											msksalarioxhora.text=listEmployee[adgemployee.selectedIndex].salarioporhora;
											rbempleadopart.selected=true;
											rbempleadofull.selected=false;
											
											
							}	
							
					if(btnCancelar.enabled==true){
						deshabilitarComponentes();
						
					}	
					btnNuevo.enabled  = true;
					btnGuardar.enabled = false;
					btndeshabilitar.enabled = true;
					btnhabilitar.enabled = true;
					btnActualizar.enabled = false;
					btnEditar.enabled = true;
					btnCancelar.enabled = false;
			
			}
			protected function btnActualizar_clickHandler(event:MouseEvent):void
			{
				vResult=nomV.validate();
				
				if(vResult.type==ValidationResultEvent.INVALID)
					return;
				else{
					vResult=apeV.validate();
					if(vResult.type==ValidationResultEvent.INVALID)
						return;
					else{
						vResult=emV.validate();
						if(vResult.type==ValidationResultEvent.INVALID)
							return;
						else{
							if(cmbTiposdocu.selectedItem==null){
								Alert.show("   Seleccione un Tipo de Documento DNI, LE, LC, PASAPORTE   ");
								return;
							}else{
								if(txtdocumento.text.length==0){
									Alert.show("   Ingrese un número de Documento!!!    ");
									return;
								}else{
									if(txtdocumento.text.length<7){
										Alert.show("   Ingrese un número de Documento de manera correcta   ");
										return;
										
									}else{
										vResult=nomuserV.validate();
										if(vResult.type==ValidationResultEvent.INVALID)
											return;
										else{
											vResult=passV.validate();
											if(vResult.type==ValidationResultEvent.INVALID)
												return;
											else{
												if(txtpassword.text.length==0||txtrepassword.text.length==0)
													Alert.show("FALTA INGRESAR O \nREINGRESAR EL PASSWORD, CORRIJA!!!");
												else{
													if(txtpassword.text!=txtrepassword.text)
														Alert.show("LOS PASSWORD NO COINCIDEN, CORRIJA!!!");
													else{
													Alert.show("Desea Actualizar los Datos de Empleado?","Confirmar Operación", Alert.YES | Alert.NO, this, actualizarEmpleado, null, Alert.NO);
													}
												}
												
											}
											
											
										}
										
									}
									
								}
								
							}	
							
						}
					}
				}
					
				
			}
			protected function actualizarEmpleado(evt:CloseEvent):void{
				var salario:Number=0;
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;				
			
				wsempleado.actualizarEmpleado(getDatosEmpleado());
			}
			protected function operation1_resultHandler_actualizar(event:ResultEvent):void
			{
				
				
				var retorno:int=int(event.result.toString());
				
				resultado(retorno);
		
				
			}
			
			protected function operation1_faultHandler_actualizar(event:FaultEvent):void
			{
				Alert.show("ERROR AL ACTUALIZAR DATOS DE EMPLEADO EN BASE DE DATOS");
				
			}
			//-----------------------------------------------------------
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.removeAllElements();
			}
			//-----------------------------------------------------------		
			
			
			protected function btnEditar_clickHandler(event:MouseEvent):void
			{
				habilitarComponentes();
				btnActualizar.enabled = true;
				btnNuevo.enabled = false;
				btnGuardar.enabled = false;
				btnCancelar.enabled = true;
			}
			
			protected function btnCancelar_clickHandler(event:MouseEvent):void
			{
				if(btnActualizar.enabled==true){
					btnActualizar.enabled = false;
					
				}
				if(btnGuardar.enabled==true){
					btnGuardar.enabled = false;
				}
				deshabilitarComponentes();
				addInfo();
			}
			
		]]>
	</fx:Script>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:WebService id="wsempleado" wsdl="http://localhost:8080/ServicesEmpleados/EmpleadosWs?WSDL" showBusyCursor="true">
			<s:operation name="addEmpleadoFullTime"
						 result="operationAddEmpleadosFulltime1_resultHandler(event)"
						 fault="operation1AddEmpladosFullTime_faultHandler(event)"
						 >
				
			</s:operation>
			<s:operation name="addEmpleadoParttime"
						 result="operationAddEmpleadosPartime1_resultHandler(event)"
						 fault="operationAddEmpleadosPartime1_faultHandler(event)">
				
			</s:operation>
			<s:operation name="selectAllEmpleados"
						 result="operationSelectAllEmpleados_resultHandler(event)"
						 fault="operationselectAllEmpleados_faultHandler(event)">
				
			</s:operation>
			
			<s:operation name="actualizarEmpleado"
						 result="operation1_resultHandler_actualizar(event)"
						 fault="operation1_faultHandler_actualizar(event)">
				
			</s:operation>
		</s:WebService>
		<s:XMLListCollection id="xmllistEmpleados" source="{listEmpleados.item}"/>
		<mx:XMLListCollection id="xmlListTiposDocu" source="{xmlTiposdocu.Tipo}"/>
		<mx:XMLListCollection id="xmlListGeneros" source="{xmlGeneros.Genero}"/>
		<mx:EmailValidator id="emV" source="{txtemail}" property="text"					   
						   required="false" invalidCharError="La dirección de email contiene caracteres inválidos!!!"
						   tooManyAtSignsError="La dirección de email contiene muchos caracteres!!!"
						   invalidDomainError="Dominio de la dirección de email incorrecto" invalidIPDomainError="Mensaje de error cuando el dominio de IP no es válido. El dominio IP debe estar encerrado entre corchetes." 
						   />
		
		
		
		<mx:StringValidator id="apeV" source="{txtapellido}"
							property="text" minLength="2" maxLength="30"
							required="true" requiredFieldError="Debe Ingresar el Apellido"/>	
		
		<mx:StringValidator id="nomV" source="{txtnombre}" 
							property="text" minLength="2" maxLength="30"
							required="true" requiredFieldError="Debe Ingresar el Nombre"/>
		<mx:StringValidator id="passV" source="{txtpassword}" 
							property="text" minLength="4" maxLength="15"
							required="true" requiredFieldError="Debe Ingresar Password"/>
		<mx:StringValidator id="passreV" source="{txtrepassword}" 
							property="text" minLength="4" maxLength="15"
							required="true" requiredFieldError="Debe Reingresar el Password"/>
		<mx:StringValidator id="nomuserV" source="{txtnameuser}" 
							property="text" minLength="2" maxLength="20"
							required="true" requiredFieldError="Debe Ingresar el Nombre de Usuario"/>
		
		
	
		<fx:XML format="e4x" id="xmlTiposdocu">
			<TiposDocumentos>
				<Tipo>
					<descripcion>DNI</descripcion>
					<id>3</id>
				</Tipo>
				<Tipo>
					<descripcion>LC</descripcion>
					<id>2</id>
				</Tipo>
				<Tipo>
					<descripcion>LE</descripcion>
					<id>1</id>
				</Tipo>   
				<Tipo>
					<descripcion>PASAPORTE</descripcion>
					<id>4</id>
				</Tipo>			 
			</TiposDocumentos>	
		</fx:XML>
		<fx:XML format="e4x" id="xmlGeneros">
			<Generos>
				<Genero>
					<id>1</id>
					<descripcion>M</descripcion>
				</Genero>
				<Genero>
					<id>2</id>
					<descripcion>F</descripcion>
				</Genero>
			</Generos>			
		</fx:XML>	
		<s:RadioButtonGroup id="rdgroupEmpleados"/>
	</fx:Declarations>

	
	<s:DataGrid id="adgemployee" x="27" y="25" width="655" height="148"
				alternatingRowColors="[#95efdf, #d9e1dd]" click="dgemployee_clickHandler(event)"
				dataProvider="{listEmployee}" fontFamily="Verdana" fontSize="12"
				requestedRowCount="4" selectedIndex="0" selectionMode="singleRow">

		<s:columns>
			<s:ArrayList>

				<s:GridColumn dataField="id" headerText="ID" visible="false"></s:GridColumn>
				<s:GridColumn dataField="nombre" headerText="Nombre"></s:GridColumn>
				<s:GridColumn dataField="apellido" headerText="Apellido" ></s:GridColumn>
				<s:GridColumn dataField="emptype" headerText="Emptyte" ></s:GridColumn>				
				<s:GridColumn dataField="nameuser" headerText="Usuario" visible="false"></s:GridColumn>				
				<s:GridColumn dataField="clave" headerText="Clave" visible="false"></s:GridColumn>
				<s:GridColumn dataField="estado" headerText="Estado" rendererIsEditable="true">


					<s:itemRenderer>
						<fx:Component>
							<s:GridItemRenderer>
								<mx:CheckBox horizontalCenter="0" click="data.estado=!data.estado" verticalCenter="0" width="90%" selected="{data.estado}"/>
							</s:GridItemRenderer>
						</fx:Component>
					</s:itemRenderer>
				
				</s:GridColumn>
				


				

			</s:ArrayList>
		</s:columns>		
	</s:DataGrid>
	<s:Label x="208" y="8" color="#2BCC68" fontFamily="Verdana" fontSize="16" fontWeight="bold"
			 text="CARGA Y EDICIÓN DE EMPLEADOS" textAlign="center"/>
	<s:Label x="27" y="190" fontSize="20" fontWeight="bold" text="Nombre:"/>
	<s:TextInput id="txtnombre" x="109" y="183" width="237" fontSize="16" maxChars="30"
					   prompt="Ingrese su nombre...." restrict="A-ÑZa-ñz "
					   skinClass="spark.skins.spark.TextInputSkin"/>
	<s:Label x="354" y="191" fontSize="20" fontWeight="bold" text="Apellido:"/>
	<s:TextInput id="txtapellido" x="445" y="183" width="216" fontSize="16" maxChars="30"
				 prompt="Ingrese su apellido..." restrict="A-ÑZa-ñz " skinClass="spark.skins.spark.TextInputSkin"/>
	<s:Label x="28" y="216" fontSize="20" fontWeight="bold" text="Email:"/>
	<s:TextInput id="txtemail" x="108" y="212" width="239" fontSize="16" maxChars="50"
					   prompt="Ingrese email..." skinClass="spark.skins.spark.TextInputSkin"/>
	<s:Label x="355" y="219" color="#033339" fontSize="20" text="Tipo:"/>
	<s:Label x="28" y="246" width="112" height="22" color="#033339" fontSize="20" text="Documento:"/>
	<controls:MaskedTextInput id="txtdocumento" x="137" y="245" width="87"
							   fontFamily="Verdana"
							  fontSize="16" fontWeight="bold" inputMask="########" maxChars="8"
							  restrict="0-9" 
							  toolTip="Ingrese el Número de Documento!!!" required="true"/>
	<components:AdvancedAutoComplete id="cmbTiposdocu" x="445" y="211" width="99" 
									 allowDuplicates="false" allowEditingNewValues="false"
									 allowEditingSelectedValues="false"
									 allowMultipleSelection="false" allowNewValues="false"
									 backspaceAction="remove" dataProvider="{xmlListTiposDocu}"
									 fontFamily="Verdana" fontSize="16" fontWeight="bold"
									 labelField="descripcion" matchType="beginning" tabIndex="0"
									 toolTip="Seleccione el Tipo de Documento!!!"
									 verticalScrollPolicy="on">
	</components:AdvancedAutoComplete>
	<s:Label x="355" y="246" color="#033339" fontSize="20" text="Genero:"/>
	<components:AdvancedAutoComplete id="cmbGeneros" x="446" y="242" width="53"
									 allowDuplicates="false" allowEditingNewValues="false"
									 allowEditingSelectedValues="false"
									 allowMultipleSelection="false" allowNewValues="false"
									 backspaceAction="remove" dataProvider="{xmlListGeneros}"
									 fontFamily="Verdana" fontSize="16" fontWeight="bold"
									 labelField="descripcion" matchType="beginning" tabIndex="4"
									 toolTip="Seleccione el Genero del Cliente M o F!!!"
									 verticalScrollPolicy="on">
	</components:AdvancedAutoComplete>
	<s:Label x="29" y="353" color="#033339" fontSize="20" text="Observaciones:"/>
	<s:TextArea id="txtobservaciones" x="28" y="377" width="670" height="96"
					   fontFamily="Verdana" fontSize="16" fontWeight="bold" maxChars="32000"
					   prompt="Ingrese las Observaciones..." 
					   tabIndex="6"/>
	<s:Button id="btnNuevo" x="28" y="481" height="31" label="Nuevo"
			  click="btnNuevo_clickHandler(event)" fontSize="16"/>
	<s:Button id="btnGuardar" x="106" y="481" height="30" label="Guardar"
			  click="btnGuardar_clickHandler(event)" enabled="false" fontSize="16"/>
	
	<s:Label id="labelsalariofull" x="403" y="344" width="129" fontSize="16" text="Salario Mensual $:"/>
	<s:Label id="labelsalariopart" x="403" y="344" width="139" fontSize="16" text="Salario por Hora $:" visible="false"/>
	<controls:MaskedTextInput id="msksalario" x="536" y="329" height="30" fontSize="16" maxChars="6"
							  restrict="0-9." textAlign="center"/>
	<controls:MaskedTextInput id="msksalarioxhora" visible="false" x="536" y="329" width="98"
							  height="30" fontSize="16" restrict="0-9." textAlign="center" maxChars="6"/>
	
	
	<s:Label x="28" y="285" fontSize="20" fontWeight="bold" text="Usuario:"/>
	<s:TextInput id="txtnameuser" x="111" y="282" width="237" fontSize="16" maxChars="20"
					   prompt="Ingrese un nombre de usuario..." restrict="A-ÑZa-ñz 0-9 "
					   skinClass="spark.skins.spark.TextInputSkin"/>
	<s:Label x="356" y="285" fontSize="20" fontWeight="bold" text="Password:"/>
	<s:Label x="355" y="308" fontSize="20" fontWeight="bold" text="Repassword:"/>
	<s:TextInput id="txtpassword" x="483" y="277" width="168" displayAsPassword="true" restrict="[a-zA-Z0-9_-]"
					   fontSize="16" prompt="Ingrese password...." 
					   skinClass="spark.skins.spark.TextInputSkin" maxChars="15"/>
	<s:TextInput id="txtrepassword" x="483" y="303" width="168" displayAsPassword="true" restrict="[a-zA-Z0-9_-]"
					   fontSize="16" prompt="Reingreso password..." 
					   skinClass="spark.skins.spark.TextInputSkin" maxChars="15"/>
	<s:VGroup x="252" y="327" >
	<s:RadioButton id="rbempleadofull" x="250" y="339" label="Empleado FullTime"
				   groupName="rdgroupEmpleados" selected="true" click="rbempleadofull_clickHandler(event)"/>
	<s:RadioButton id="rbempleadopart" x="250" y="357" label="Empleado PartTime" 
				   click="rbempleadopart_clickHandler(event)" groupName="rdgroupEmpleados"/>
	</s:VGroup>
	<s:Button id="btndeshabilitar" x="191" y="481" height="30" label="Deshabilitar"
			  click="btndeshabilitar_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Deshabilita un empleado para poder operar el Sistema"/>
	<s:Button id="btnhabilitar" x="300" y="481" height="30" label="Habilitar"
			  click="btnhabilitar_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Habilita un empleado para poder operar el Sistema"/>
	<s:Button id="btnActualizar" x="386" y="481" width="99" height="30" label="Actualizar"
			  click="btnActualizar_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Para actulizar datos debe seleccionar un Empleado del Listado"/>
	<s:Button id="btnCloseClientComponent" x="692" y="5" width="16" height="19" icon="assets/icon_close.png" click="btnClose_clickHandler(event)"/>
	<s:Button id="btnEditar" x="493" y="481" width="102" height="30" label="Editar"
			  click="btnEditar_clickHandler(event)" enabled="true" fontSize="16"
			  toolTip="Habilita la edición de datos del Empleado a Actualizar"/>
	<s:Button id="btnCancelar" x="603" y="481" width="95" height="31" label="Cancelar"
			  click="btnCancelar_clickHandler(event)" enabled="false" fontSize="16"
			  toolTip="Cancelar Operación"/>
	
</s:Group>








