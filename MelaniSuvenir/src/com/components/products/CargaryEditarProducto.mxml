<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009"
		 xmlns:s="library://ns.adobe.com/flex/spark"
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:controls="com.adobe.flex.extras.controls.*"
		 xmlns:components="com.hillelcoren.components.*"
		 width="1130" height="418" creationComplete="group1_creationCompleteHandler(event)" xmlns:local="*">
	
	<fx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import org.flexunit.runner.Result;		
			[Bindable]
			private var xmllistproducto:XMLList;
			[Bindable]
			private var idproducto:int=0;			
			[Bindable]
			private var cargarImagen:FileReference=new FileReference();			
			protected function btnNuevo_clickHandler(event:MouseEvent):void
			{
				if(txtcodigoproducto.editable==false)
					txtcodigoproducto.editable=true;
				
				txtdescripcion.setFocus();
				txtcantidaddisponible.text="";
				txtcantidadinicial.text="";
				txtcodigoproducto.text="";
				txtdescripcion.text="";
				txtprecio.text="";
				idproducto=0;
				imgProducto.source="assets/android-logo-400x300.jpg";
				
				
				
				
			}
			protected function getDatos():String{
				
				var producto:String="<producto>\n";					
					producto+="<idproducto>"+idproducto+"</idproducto>\n" +					
					"<descripcion>"+txtdescripcion.text.toUpperCase()+"</descripcion>\n" +					
					"<preciounitario>"+txtprecio.text+"</preciounitario>\n"+
					"<codproducto>"+txtcodigoproducto.text.toUpperCase()+"</codproducto>\n"+
					"<cantidadinicial>"+txtcantidadinicial.text+"</cantidadinicial>\n"+
					"<cantidaddisponible>"+txtcantidaddisponible.text+"</cantidaddisponible>\n" +					
					
					"<fechaCarga></fechaCarga>"+
					"<img>0</img>" +
					"<idusuario>12</idusuario>"+
					"</producto>";
				
				return producto;	
				
			}
			protected function btnguardar_clickHandler(event:MouseEvent):void
			{
				
				
				if(txtdescripcion.text.length==0){
					Alert.show("falta la descripcion");
					return;
				}
				if(txtcodigoproducto.text.length==0){
					Alert.show("falta el codigio de producto");
					return;
				}
				
				if(txtprecio.text.length==0){
						Alert.show("falta el precio");
						return;
				}
				
				if(txtcantidadinicial.text.length==0){
					Alert.show("falta la cantidad inicial");
					return;
				}
				if(txtcantidaddisponible.text.length==0){
					Alert.show("falta la cantidad disponible");
					return;
				}			
				
				if(idproducto==0)
					servicesProducto.addProducto(getDatos());
				else 
					servicesProducto.actualizarProducto(getDatos());
					
				
				
			}
			private function tranferirFocus(keyPress:KeyboardEvent):void{
				
				if(keyPress.keyCode==Keyboard.ENTER){
				
					
					if(keyPress.currentTarget.toString().indexOf("txtdescripcion")!=-1){
						if(txtcodigoproducto.editable==false)
							txtcodigoproducto.editable=true;
						txtcodigoproducto.setFocus();
						return;
					
					}
					if(keyPress.currentTarget.toString().indexOf("txtcodigoproducto")!=-1){
						txtprecio.setFocus();
						return;
						
					}
					if(keyPress.currentTarget.toString().indexOf("txtprecio")!=-1){
						txtcantidadinicial.setFocus();
						return;
						
					}
					if(keyPress.currentTarget.toString().indexOf("txtcantidadinicial")!=-1){
						txtcantidaddisponible.setFocus();
						return;
						
					}
				
					if(keyPress.currentTarget.toString().indexOf("txtcantidaddisponible")!=-1){
						btnguardar.setFocus();
						return;
						
					}
					if(keyPress.currentTarget.toString().indexOf("cmbBuscarProducto")!=-1){
						addRowGrid();
					}
				
				}
			
			
			}
			protected function addRowGrid():void{
				adgProductos.setSelectedIndex(cmbBuscarProducto.selectedItemId);
			}
			protected function operation1_resultHandler(event:ResultEvent):void
			{
				if(String(event.result.toString())=="LA CONSULTA NO ARROJÓ RESULTADOS")
					Alert.show("LA CONSULTA NO ARROJÓ RESULTADOS");
				else{
					if(String(event.result.toString())=="NADA"){
						Alert.show("FALLÓ LA CONEXION CON LA BASE DE DATOS, REVISE LOS SERVICIOS SI SE HAN INICIADO CORRECTAMENTE.");
					}else{
						xmllistproducto=new XMLList(event.result);							
						adgProductos.dataProvider=product;		
						cmbBuscarProducto.dataProvider=product;
						lbltotalproductos.text=String(product.length);
						adgProductos.selectedIndex=0;
						adgProductos.validateNow();						
						addInfo();
					}
				}
				
				
				
				
			}
			protected function resultado(indice:int):void{
				
				switch(indice)
				{
					case 0:
					{
						Alert.show("NO PASÓ NADA");
						limpiarFormulario();						
						break;
					}
					case -1:
					{
						Alert.show("ERROR EN EL SERVIDOR!!!");
						limpiarFormulario();
						break;
					}
					case -2:
					{
						Alert.show("ERROR EN EL SERVIDOR!!!");
						limpiarFormulario();
						
						break;
					}
					case -5:
					{
						Alert.show("    YA HAY UN PRODUCTO CON LA MISMA DESCRIPCIÓN, IMPOSIBLE ALMACENAR     ");
						servicesProducto.searchAllProductos();	
						break;
					}
					case -6:
					{
						Alert.show("   YA HAY UN PRODUCTO CON EL MISMO CODIGO DE PRODUCTO, IMPOSIBLE ALMACENAR    ");
						servicesProducto.searchAllProductos();
						break;
					}	
					case -7:
					{
						Alert.show("   FALTA LA DESCRIPCION DEL PRODUCTO O NO ES VÁLIDA    ");
						servicesProducto.searchAllProductos();
						break;
					}	
					case -8:
					{
						Alert.show("   FALTA EL CODIGO DE PRODUCTO O NO ES VÁLIDO    ");
						servicesProducto.searchAllProductos();
						break;
					}	
						
						
						
					default:
					{						
						servicesProducto.searchAllProductos();
						limpiarFormulario();						
						break;
					}
				}
			
			
			}
			protected function producto_resultHandler(event:ResultEvent):void{
				var indice:Number;
				
				xmllistproducto=new XMLList(event.result);
				indice = new Number(product[0].id);
				resultado(indice);
			
			
			
			
			}
			protected function limpiarFormulario():void{
			
				if(txtcodigoproducto.editable==true)
					txtcodigoproducto.editable=false;
				
				txtdescripcion.setFocus();
				txtcantidaddisponible.text="";
				txtcantidadinicial.text="";
				txtcodigoproducto.text="";
				txtdescripcion.text="";
				txtprecio.text="";
				idproducto=0;
				lbltotalproductos.text="0";
				
			
			}
		
			protected function producto_faultHandler1(event:FaultEvent):void{
				
				Alert.show("   SE PRODUJO UN ERROR AL ACTUALIZAR\n UN PRODUCTO, REVISE!!!   ");		
				
				
			}
			protected function group1_creationCompleteHandler(event:FlexEvent):void
			{
				
				servicesProducto.searchAllProductos();
				txtcantidadinicial.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtcantidaddisponible.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtcodigoproducto.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtdescripcion.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				txtprecio.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				cmbBuscarProducto.addEventListener(KeyboardEvent.KEY_UP,tranferirFocus);
				imgProducto.source="assets/android-logo-400x300.jpg";
				
			}
			//---------------------------------------------------------------------------
			protected function operation1_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR AL BUSCAR LISTA DE PRODUCTOS");				
			}
			//----------------------------------------------------------------------
			//-----------------------------------------------------------
			protected function btnClose_clickHandler(event:MouseEvent):void
			{
				this.removeAllElements();
			}
			//-----------------------------------------------------------	
			
			protected function adgProductos_doubleClickHandler(event:MouseEvent):void
			{
				addInfo();
			}
			
			protected function addInfo():void{
				var bytessImages:int=adgProductos.selectedItem.img;				
				idproducto=adgProductos.selectedItem.id;
				txtprecio.text=adgProductos.selectedItem.precio;
				txtcantidaddisponible.text=adgProductos.selectedItem.cantidadDisponible;
				txtcantidadinicial.text=adgProductos.selectedItem.cantidadInicial;
				txtcodigoproducto.text=adgProductos.selectedItem.idproduct;
				txtdescripcion.text=adgProductos.selectedItem.descripcion;				
				if(bytessImages>0)					
					servicesProducto.obtenerImagenProducto(idproducto);
				else
					imgProducto.source="assets/android-logo-400x300.jpg";
			}
			
			protected function producto_imagen_seleccion(event:ResultEvent):void{			
				var imgBytes:ByteArray=new ByteArray();	
				imgBytes=event.result as ByteArray;
				imgProducto.source=imgBytes;				
			}
			protected function producto_imagen_error(event:FaultEvent):void{
				
				Alert.show("Error al seleccionar Imagen de Base de Datos");
			}
			
			protected function btnExamniar_clickHandler(event:MouseEvent):void
			{
				
				
				var arr:Array=[];
				
				arr.push(new FileFilter("Images", "*.jpg;*.gif;*.png"));
				cargarImagen.browse(arr);
				
				cargarImagen.addEventListener(Event.SELECT,imagenSeleccion);
				cargarImagen.addEventListener(Event.COMPLETE,imagenCargaCompleta);
				
			}
			
			protected function imagenCargaCompleta(event:Event):void{
				
				imgProducto.source=cargarImagen.data;
				
				
				
			}
			protected function imagenSeleccion(event:Event):void{
				cargarImagen.load();			
			}
			
			
			protected function btnSubirImagen_clickHandler(event:MouseEvent):void
			{
				
				if(idproducto>0){
					
					servicesProducto.grabarImagen(idproducto,cargarImagen.data,cargarImagen.name,String(cargarImagen.size));
				}else
					Alert.show("Debe Seleccionar un producto\n, antes de subir la imagen.");
			}
			
			protected function operation2_resultHandler(event:ResultEvent):void{
				Alert.show("Imagen 'Almacenada'");
				servicesProducto.searchAllProductos();	
			}
			protected function operation2_faultHandler(event:FaultEvent):void
			{	imgProducto.source="assets/android-logo-400x300.jpg";
				Alert.show("Fallo al 'Almacenar' Imagen");
			}
			protected function operation3_faultHandler(event:FaultEvent):void
			{
				Alert.show("ERROR AL QUERER AGREGAR UN PRODUCTO, REVISE");
			}
			
		]]>
	</fx:Script>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		<s:XMLListCollection id="product" source="{xmllistproducto.producto}"/>
		<s:WebService id="servicesProducto" wsdl="http://192.168.1.101:8080/ServiceProductos/ProductosWs?WSDL"
					   
					   showBusyCursor="true"
					   useProxy="false">
			
			
			<s:operation name="actualizarProducto"
						  resultFormat="object"
						  result="producto_resultHandler(event)"
						  fault="producto_faultHandler1(event)">				
			</s:operation>
			<s:operation name="searchAllProductos"
						  fault="operation1_faultHandler(event)"
						  result="operation1_resultHandler(event)">
			</s:operation>
			<s:operation name="addProducto"
						 result="producto_resultHandler(event)"
						 fault="operation3_faultHandler(event)">
				
				
			</s:operation>
			<s:operation name="obtenerImagenProducto"
						 result="producto_imagen_seleccion(event)"
						 fault="producto_imagen_error(event)">
				
			</s:operation>
			<s:operation name="grabarImagen"
						 result="operation2_resultHandler(event)"
						 fault="operation2_faultHandler(event)">
				
			</s:operation>
			
		</s:WebService>
		<s:CurrencyFormatter id="cf" currencySymbol="$" fractionalDigits="3" locale="es-AR"  
							 decimalSeparator="." groupingSeparator="," currencyISOCode="locale and OS dependent" useCurrencySymbol="false"/>
	</fx:Declarations>
	
	<s:DataGrid id="adgProductos" x="14" y="67" width="698" height="174"
				alternatingRowColors="[#ffffff,#fcff4f7]"
				click="adgProductos_doubleClickHandler(event)"
				doubleClick="adgProductos_doubleClickHandler(event)" doubleClickEnabled="true"
				fontFamily="Verdana" fontSize="12" requestedRowCount="4">
		<s:columns>
			<s:ArrayList>
				<s:GridColumn dataField="id" headerText="id" visible="false"></s:GridColumn>
				<s:GridColumn dataField="idproduct" headerText="idproduct" visible="false"></s:GridColumn>
				<s:GridColumn dataField="descripcion" headerText="Descripción" ></s:GridColumn>
				<s:GridColumn dataField="precio" headerText="Precio" formatter="{cf}" width="120"></s:GridColumn>
				<s:GridColumn dataField="cantidadInicial" headerText="CantInicial" width="110"></s:GridColumn>
				<s:GridColumn dataField="cantidadDisponible" headerText="CantDisponible" width="110"></s:GridColumn>
			</s:ArrayList>
		</s:columns>
		<s:typicalItem>
			<fx:Object dataField1="Sample Data" dataField2="Sample Data" dataField3="Sample Data"></fx:Object>
		</s:typicalItem>
		<s:ArrayList>
			<fx:Object dataField1="data1" dataField2="data1" dataField3="data1"></fx:Object>
			<fx:Object dataField1="data2" dataField2="data2" dataField3="data2"></fx:Object>
			<fx:Object dataField1="data3" dataField2="data3" dataField3="data3"></fx:Object>
			<fx:Object dataField1="data4" dataField2="data4" dataField3="data4"></fx:Object>
		</s:ArrayList>
	</s:DataGrid>
	<s:Label x="8" y="249" fontSize="16" fontWeight="bold" text="Descripción:"
			 verticalAlign="bottom"/>
	<s:TextInput id="txtdescripcion" x="9" y="263" width="244" chromeColor="#4D4B4B"
					   fontSize="16" prompt="Ingrese la Descripcion del Producto..."
					   restrict="a-z A-Z ñ-Ñ 0-9_ " />
	<s:Label x="267" y="248" fontSize="16" fontWeight="bold" text="Código Producto:"
			 verticalAlign="bottom"/>
	<s:Label x="8" y="294" fontSize="16" fontWeight="bold" text="Precio:" verticalAlign="bottom"/>
	<s:Label x="268" y="295" fontSize="16" fontWeight="bold" text="Cantidad Inicial:"
			 verticalAlign="bottom"/>
	<s:Label x="8" y="336" fontSize="16" fontWeight="bold" text="Cantidad Disponible:"
			 verticalAlign="bottom"/>
	<s:TextInput id="txtcodigoproducto" x="269" y="263" width="214" fontSize="16"
				 prompt="Ingrese un Código Interno del Producto..."/>
	<controls:MaskedTextInput id="txtprecio" x="9" y="309" fontSize="16" restrict="0-9."/>
	<controls:MaskedTextInput id="txtcantidadinicial" x="269" y="310" fontSize="16" restrict="0-9."/>
	<controls:MaskedTextInput id="txtcantidaddisponible" x="9" y="351" fontSize="16" restrict="0-9."/>
	<s:Button id="btnnuevo" x="460" y="381" width="81" height="29" label="Nuevo"
			  click="btnNuevo_clickHandler(event)" cornerRadius="3" fontSize="16"
			  toolTip="Cargar Nuevo Producto"/>
	<s:Button id="btnguardar" x="580" y="381" width="89" height="29" label="Guardar"
			  click="btnguardar_clickHandler(event)" fontSize="16" toolTip="Guardar Datos de Producto"/>
	<s:Button id="btnCloseClientComponent" x="1104" y="10" width="16" height="19"
			  click="btnClose_clickHandler(event)" icon="assets/icon_close.png"/>
	<s:Label x="223" y="43" color="#3FF182" fontFamily="Verdana" fontSize="18" fontWeight="bold"
			 text="CARGAR Y EDITAR PRODUCTOS"/>
	<s:Label x="537" y="248" fontFamily="Arial" fontSize="16" fontWeight="bold"
			 text="Productos Cargados:"/>
	<s:Label id="lbltotalproductos" x="538" y="264" width="164" fontFamily="Verdana" fontSize="16"
			 verticalAlign="middle"/>
	<s:Label x="270" y="337" fontFamily="Arial" fontSize="16" fontWeight="bold" text="Buscar:"/>
	<components:AutoComplete x="271" y="351" width="197" id="cmbBuscarProducto" matchType="beginning" labelField="descripcion">
	</components:AutoComplete>
	<mx:VRule x="720" y="10" width="1" height="398"/>
	<s:BorderContainer x="729" y="39" width="391" height="308">
		<s:Button id="btnExamniar" x="10" y="19" width="116" height="28" label="Examinar....."
				  click="btnExamniar_clickHandler(event)" fontFamily="Arial" fontWeight="bold"
				  toolTip="Elegir imagen a almacenar"/>
		<s:Label x="10" y="5" width="369" color="#3FF182" fontFamily="Verdana" fontSize="16"
				 fontWeight="bold" text="CARGAR Y VER IMAGEN DE PRODUCTO" textAlign="center"/>
		<s:Image id="imgProducto" x="10" y="48" width="363" height="219"/>
		<s:Button id="btnSubirImagen" x="10" y="272" width="116" height="31" label="Almacenar..."
				  click="btnSubirImagen_clickHandler(event)" fontWeight="bold"
				  toolTip="Hacer click para almacenar la imagen en la base de datos"/>
	</s:BorderContainer>
</s:Group>
